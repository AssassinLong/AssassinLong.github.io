<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>程序化&amp;人生</title>
 <link href="" rel="self"/>
 <link href=""/>
 <updated>2016-11-04T20:17:32+08:00</updated>
 <id></id>
 <author>
   <name>assassinlong</name>
   <email>1099587627@qq.com</email>
 </author>

 
 <entry>
   <title>微信之APP支付</title>
   <link href="/%E5%BE%AE%E4%BF%A1/2016/11/04/%E5%BE%AE%E4%BF%A1APP%E6%94%AF%E4%BB%98"/>
   <updated>2016-11-04T00:00:00+08:00</updated>
   <id>/%E5%BE%AE%E4%BF%A1/2016/11/04/微信APP支付</id>
   <content type="html">&lt;p&gt;用户在微信公众平台(申请扫码支付、公众号支付)或开放平台(申请APP支付)按照相应提示，申请相应微信支付模式。微信支付工作人
员审核资料无误后开通相应的微信支付权限。微信支付申请审核通过后，商户在申请资料填写的邮箱中收取到由微信支付小助手发送的
邮件，此邮件包含开发时需要使用的支付账户信息。&lt;/p&gt;
&lt;p&gt;邮件中的账户参数与接口API参数对应关系见下表格&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th&gt;邮件中参数&lt;/th&gt;
    &lt;th&gt;API参数名&lt;/th&gt;
    &lt;th&gt;详细说明&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;APPID&lt;/td&gt;
    &lt;td&gt;appid&lt;/td&gt;
    &lt;td&gt;appid是微信公众账号或开放平台APP的唯一标识，在公众平台申请公众账号或者在开放平台申请APP账号后，微信会自动分配对
        应的appid，用于标识该应用。可在微信公众平台--&amp;gt;开发者中心查看，商户的微信支付审核通过邮件中也会包含该字段值。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;微信支付商户号&lt;/td&gt;
    &lt;td&gt;mch_id&lt;/td&gt;
    &lt;td&gt; 商户申请微信支付后，由微信支付分配的商户收款账号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;API密钥&lt;/td&gt;
    &lt;td&gt;key&lt;/td&gt;
    &lt;td&gt;交易过程生成签名的密钥，仅保留在商户系统和微信支付后台，不会在网络中传播。商户妥善保管该Key，切勿在网络中传输，
        不能在其他客户端中存储，保证key不会被泄漏。商户可根据邮件提示登录微信商户平台进行设置。也可按一下路径设置：微信
        商户平台(pay.weixin.qq.com)--&amp;gt;账户设置--&amp;gt;API安全--&amp;gt;密钥设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Appsecret&lt;/td&gt;
    &lt;td&gt;secret&lt;/td&gt;
    &lt;td&gt; AppSecret是APPID对应的接口密码，用于获取接口调用凭证access_token时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>github+jekyll搭建博客</title>
   <link href="/jekyll/2016/10/15/github+jekyll"/>
   <updated>2016-10-15T00:00:00+08:00</updated>
   <id>/jekyll/2016/10/15/github+jekyll</id>
   <content type="html">&lt;p&gt;喜欢写博客的人，会经历三个阶段：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;大多数人都停留在第一和第二个阶段，但是现在越来越多的人，主要是程序员喜欢在Github上写博客，一切都任由你左右，一个commit就能提交一篇文章，还有着无限流量免费的空间，想想就惬意不止。&lt;/p&gt;
&lt;p&gt;进入正题，如何利用Github和Jekyll搭建一个博客：&lt;/p&gt;
&lt;h3 id=&quot;section&quot;&gt;介绍&lt;/h3&gt;

&lt;p&gt;　Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的&lt;/p&gt;

&lt;p&gt;　使用 Jekyll 搭建博客之前要确认下本机环境，Git 环境（用于部署到远端）、&lt;a href=&quot;http://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby&lt;/a&gt; 环境（Jekyll 是基于 Ruby 开发的）、包管理器 &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;              &lt;br /&gt;
　　如果你是 Mac 用户，你就需要安装 Xcode 和 Command-Line Tools了。下载方式 Preferences → Downloads → Components。&lt;/p&gt;

&lt;p&gt;　　Jekyll 是一个免费的简单静态网页生成工具，可以配合第三方服务例如： Disqus（评论）、多说(评论) 以及分享 等等扩展功能，Jekyll 可以直接部署在 Github（国外） 或 Coding（国内） 上，可以绑定自己的域名。&lt;a href=&quot;http://jekyll.bootcss.com/&quot;&gt;Jekyll中文文档&lt;/a&gt;、&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll英文文档&lt;/a&gt;、&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll主题列表&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-&quot;&gt;Jekyll 环境配置&lt;/h3&gt;

&lt;p&gt;安装 jekyll&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建博客&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll new myBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进入博客目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd myBlog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动本地服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在浏览器里输入： &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;，就可以看到你的博客效果了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so easy !&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;目录结构&lt;/h3&gt;
&lt;p&gt;　
　Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是： 你用你最喜欢的标记语言来写文章，可以是 Markdown，也可以是 Textile,或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置URL路径, 你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。&lt;/p&gt;

&lt;p&gt;一个基本的 Jekyll 网站的目录结构一般是像这样的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _config.yml
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   ├── post.html
|   └── page.html
├── _posts
|   └── 2016-10-08-welcome-to-jekyll.markdown
├── _sass
|   ├── _base.scss
|   ├── _layout.scss
|   └── _syntax-highlighting.scss
├── about.md
├── css
|   └── main.scss
├── feed.xml
└── index.html

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这些目录结构以及具体的作用可以参考 &lt;a href=&quot;http://jekyll.com.cn/docs/structure/&quot;&gt;官网文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进入 _config.yml 里面，修改成你想看到的信息，重新 jekyll server ，刷新浏览器就可以看到你刚刚修改的信息了。&lt;/p&gt;

&lt;p&gt;到此，博客初步搭建算是完成了，&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;博客部署到远端&lt;/h3&gt;

&lt;p&gt;　我这里讲的是部署到 Github Page 创建一个 github 账号，然后创建一个跟你账户名一样的仓库，如我的 github 账户名叫 &lt;a href=&quot;https://github.com/leezhiy&quot;&gt;leezhiy&lt;/a&gt;，我的 github 仓库名就叫 &lt;a href=&quot;https://github.com/leezhiy/leezhiy.github.io&quot;&gt;leezhiy.github.io&lt;/a&gt;，创建好了之后，把刚才建立的 myBlog 项目 push 到 username.github.io仓库里去（username指的是你的github用户名），检查你远端仓库已经跟你本地 myBlog 同步了，然后你在浏览器里输入 username.github.io ，就可以访问你的博客了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;编写文章&lt;/h3&gt;

&lt;p&gt;　　所有的文章都是 _posts 目录下面，文章格式为 mardown 格式，文章文件名可以是 .mardown 或者 .md。&lt;/p&gt;

&lt;p&gt;　　编写一篇新文章很简单，你可以直接从 _posts/ 目录下复制一份出来 &lt;code class=&quot;highlighter-rouge&quot;&gt;2016-10-16-welcome-to-jekyll副本.markdown&lt;/code&gt; ，修改名字为 2016-10-16-article1.markdown ，注意：文章名的格式前面必须为 2016-10-16- ，日期可以修改，但必须为 年-月-日- 格式，后面的 article1 是整个文章的连接 URL，如果文章名为中文，那么文章的连接URL就会变成这样的：http://baixin.io/2015/08/%E6%90%AD%E5/ ， 所以建议文章名最好是英文的或者阿拉伯数字。 双击 2016-10-16-article1.markdown 打开&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
---
layout: post
title:  &quot;Welcome to Jekyll!&quot;
date:   2015-7-14 10:29:08 +0800
categories: jekyll update
---

正文...

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;title: 显示的文章名， 如：title: 我的第一篇文章                  &lt;br /&gt;
date:  显示的文章发布日期，如：date: 2016-10-16                        &lt;br /&gt;
categories: tag标签的分类，如：categories: 随笔&lt;/p&gt;

&lt;p&gt;注意：文章头部格式必须为上面的，…. 就是文章的正文内容。&lt;/p&gt;

&lt;p&gt;我写文章使用的是 Sublime Text2 编辑器，如果你对 markdown 语法不熟悉的话，可以看看&lt;a href=&quot;https://www.zybuluo.com/&quot;&gt;作业部落的教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;使用我的博客模板&lt;/h3&gt;

&lt;p&gt;虽然博客部署完成了，你会发现博客太简单不是你想要的，如果你喜欢我的模板的话，可以使用我的模板。&lt;/p&gt;

&lt;p&gt;首先你要获取的我博客，&lt;a href=&quot;https://github.com/leezhiy/leezhiy.github.io.git&quot;&gt;Github项目地址&lt;/a&gt;，你可以直接&lt;a href=&quot;https://github.com/leezhiy/leezhiy.github.io/archive/master.zip&quot;&gt;点击下载博客&lt;/a&gt;，进去leezhiy.github.io/ 目录下， 使用命令部署本地服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;如果你本机没配置过任何jekyll的环境，可能会报错&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- bundler (LoadError)
	from /Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/lib/jekyll/plugin_manager.rb:34:in `require_from_bundler&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/exe/jekyll:9:in `&amp;lt;top (required)&amp;gt;&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `load&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `&amp;lt;main&amp;gt;&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `eval&#39;
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `&amp;lt;main&amp;gt;&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;原因： 没有安装 bundler ，执行安装 bundler 命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ gem install bundler

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching: bundler-1.13.5.gem (100%)
Successfully installed bundler-1.13.5
Parsing documentation for bundler-1.13.5
Installing ri documentation for bundler-1.13.5
Done installing documentation for bundler after 5 seconds
1 gem installed

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次执行 $ jekyll server  ，提示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Could not find proper version of jekyll (3.1.1) in any of the sources
Run `bundle install` to install missing gems.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;跟着提示运行命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个时候你可能会发现 bundle install 运行卡主不动了。&lt;/p&gt;

&lt;p&gt;如果很长时间都没任何提示的话，你可以尝试修改 gem 的 source&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem sources --remove https://rubygems.org/
$ gem sources -a http://gems.ruby-china.org/
$ gem sources -l
*** CURRENT SOURCES ***

http://gems.ruby-china.org/

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次执行命令 $ bundle install，发现开始有动静了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching gem metadata from http://gems.ruby-china.org/...........
Fetching version metadata from http://gems.ruby-china.org/..
Fetching dependency metadata from http://gems.ruby-china.org/.
。。。
Installing jekyll-watch 1.3.1
Installing jekyll 3.1.1
Bundle complete! 3 Gemfile dependencies, 17 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;bundler安装完成，后再次启动本地服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll server

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;继续报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration file: /Users/tendcloud-Caroline/Desktop/leopardpan.github.io/_config.yml
  Dependency Error: Yikes! It looks like you don&#39;t have jekyll-sitemap or one of its dependencies installed. In order to use Jekyll as currently configured, you&#39;ll need to install this gem. The full error message from Ruby is: &#39;cannot load such file -- jekyll-sitemap&#39; If you run into trouble, you can find helpful resources at http://jekyllrb.com/help/!
jekyll 3.1.1 | Error:  jekyll-sitemap

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;表示 当前的 jekyll 版本是 3.1.1 ，无法使用 jekyll-sitemap&lt;/p&gt;

&lt;p&gt;解决方法有两个&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、打开当前目录下的 _config.yml 文件，把 gems: [jekyll-paginate,jekyll-sitemap] 换成 gems: [jekyll-paginate] ，也就是去掉jekyll-sitemap。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2、升级 jekyll 版本，我当前的是 jekyll 3.1.2 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修改完成后保存配置，再次执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll server

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;提示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml
            Source: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github
       Destination: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
                    done in 0.901 seconds.
 Auto-regeneration: enabled for &#39;/Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github&#39;
Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;表示本地服务部署成功。&lt;/p&gt;

&lt;p&gt;在浏览器输入 &lt;a href=&quot;127.0.0.1:4000&quot;&gt;127.0.0.1:4000&lt;/a&gt; ， 就可以看到&lt;a href=&quot;http://leezhiy.github.io&quot;&gt;leezhiy.github.io&lt;/a&gt;博客效果了。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;修改成你自己的博客&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;如果你想使用我的模板请把 _posts/ 目录下的文章都去掉。&lt;/li&gt;
    &lt;li&gt;修改 _config.yml 文件里面的内容为你自己的。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后使用 git push 到你自己的仓库里面去，检查你远端仓库，在浏览器输入 username.github.io 就会发现，你有一个漂亮的主题模板了。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;【 如果想修改博客样式却不知道怎么修改，可以直接在评论里给我提问 】&lt;/h4&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;为什么要是用 Jekyll&lt;/h3&gt;

&lt;p&gt;使用了 Jekyll 你会发现如果你想使用多台电脑发博客都很方便，只要把远端 github 仓库里的博客 clone 下来，写文章后再提交就可以了&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>linux介绍及Php环境搭建</title>
   <link href="/linux/2016/04/11/linux"/>
   <updated>2016-04-11T00:00:00+08:00</updated>
   <id>/linux/2016/04/11/linux</id>
   <content type="html">&lt;p&gt;  Linux操作系统诞生于1991 年10 月5 日（这是第一次正式向外公布时间）。Linux存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。&lt;/p&gt;

&lt;p&gt;  严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【图形模式与文字模式的切换方式】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Linux预设提供了六个命令窗口终端机让我们来登录。默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口。 &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【学会使用快捷键】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ctrl + C：这个是用来终止当前命令的快捷键，当然你也可以输入一大串字符，不想让它运行直接Ctrl + C，光标就会跳入下一行。 &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Tab： 这个键是最有用的键了，也是笔者敲击概率最高的一个键。因为当你打一个命令打一半时，它会帮你补全的。不光是命令，当你打一个目录时，同样可以补全，不信你试试。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ctrl + D： 退出当前终端，同样你也可以输入exit。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ctrl + Z： 暂停当前进程，比如你正运行一个命令，突然觉得有点问题想暂停一下，就可以使用这个快捷键。暂停后，可以使用fg 恢复它。&amp;lt;br&amp;gt;输入 man ls 其实格式为 man + 命令&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;你就会看到相关的帮助文档了。从命令的介绍到命令的参数以及用法介绍的都非常详细的。不错吧。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【Linux系统目录结构】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;登录系统后，在当前命令窗口下输入 ls / 你会看到&amp;lt;br&amp;gt;&amp;lt;img alt=&quot;2015623163215087.png (640×382)&quot; src=&quot;http://files.jb51.net/file_images/article/201506/2015623163215087.png?2015523163229&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ctrl + L： 清屏，使光标移动到第一行。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【学会查询帮助文档 — man】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这个man 通常是用来看一个命令的帮助文档的。例如：&amp;lt;br&amp;gt;&amp;lt;img alt=&quot;2015623163239180.png (507×52)&quot; src=&quot;http://files.jb51.net/file_images/article/201506/2015623163239180.png?2015523163256&quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;以下是对这些目录的解释：&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/bin bin是Binary的缩写。这个目录存放着最经常使用的命令。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/boot这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/dev dev是Device(设备)的缩写。该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/etc这个目录用来存放所有的系统管理所需要的配置文件和子目录。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/home用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/lib这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/lost+found这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/mnt系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/opt 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/proc这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;echo 1 &amp;amp;gt; /proc/sys/net/ipv4/icmp_echo_ignore_all。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/root该目录为系统管理员，也称作超级权限者的用户主目录。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/sbin s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/selinux 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/srv 该目录存放一些服务启动之后需要提取的数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs ，sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/tmp这个目录是用来存放一些临时文件的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/usr/bin：系统用户使用的应用程序。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/usr/src：内核源代码默认的放置目录。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/var这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【如何正确关机】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;其实，在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;linux和windows不同，在 Linux 底下，由于每个程序（或者说是服务）都是在在背景下执行的，因此，在你看不到的屏幕背后其实可能有相当多人同时在你的主机上面工作，例如浏览网页啦、传送信件啦以 FTP 传送档案啦等等的，如果你直接按下电源开关来关机时，则其它人的数据可能就此中断！那可就伤脑筋了！此外，最大的问题是，若不正常关机，则可能造成文件系统的毁损（因为来不及将数据回写到档案中，所以有些服务的档案会有问题！）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果你要关机，必须要保证当前系统中没有其他用户在线。可以下达 who 这个指令，而如果要看网络的联机状态，可以下达 netstat -a 这个指令，而要看背景执行的程序可以执行 ps -aux 这个指令。使用这些指令可以让你稍微了解主机目前的使用状态！（这些命令在以后的章节中会提及，现在只要了解即可！）&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;正确的关机流程为：sysnc ? shutdown ? reboot ? halt&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode16&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode16&quot;&amp;gt;sync&amp;lt;/div&amp;gt;将数据由内存同步到硬盘中。&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode17&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode17&quot;&amp;gt;shutdown&amp;lt;/div&amp;gt;关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode18&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode18&quot;&amp;gt;shutdown –h 10&amp;lt;/div&amp;gt;‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode19&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode19&quot;&amp;gt;Shutdown –h now&amp;lt;/div&amp;gt;立马关机&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode20&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode20&quot;&amp;gt;Shutdown –h 20:25&amp;lt;/div&amp;gt;系统会在今天20:25关机&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode21&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode21&quot;&amp;gt;Shutdown –h +10&amp;lt;/div&amp;gt;十分钟后关机&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode22&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode22&quot;&amp;gt;Shutdown –r now&amp;lt;/div&amp;gt;系统立马重启&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;div class=&quot;msgheader&quot;&amp;gt;&amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;span style=&quot;CURSOR: pointer&quot; onclick=&quot;copycode(getid(&#39;phpcode23&#39;));&quot;&amp;gt;&amp;lt;u&amp;gt;复制代码&amp;lt;/u&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;代码如下:&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;msgborder&quot; id=&quot;phpcode23&quot;&amp;gt;Shutdown –r +10&amp;lt;/div&amp;gt;系统十分钟后重启&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;reboot 就是重启，等同于 shutdown –r now&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;halt 关闭系统，等同于shutdown –h now 和 poweroff&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;最后总结一下，不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中。关机的命令有 shutdown –h now halt poweroff 和 init 0 , 重启系统的命令有 shutdown –r now reboot init 6.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP面向对象编程</title>
   <link href="/php/2016/03/21/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B"/>
   <updated>2016-03-21T00:00:00+08:00</updated>
   <id>/php/2016/03/21/PHP面向对象编程</id>
   <content type="html">&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;1.&lt;/span&gt;&lt;/span&gt;声明一个类&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;在&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;php&lt;/span&gt;&lt;/span&gt;中使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;class&lt;/span&gt;&lt;/span&gt;关键字创建一个新类，类包括属性与方法。语法格式如下：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 694px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_1&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_1&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=1&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;类名{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;属性；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;方法；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
 class类名{
  属性；
  方法；
 }
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;2.&lt;/span&gt;&lt;/span&gt;创建一个实例对象&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;创建对象的过程称为实例化，对象被创建时就包含&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;3&lt;/span&gt;&lt;/span&gt;个特性：对象句柄，对象属性，对象方法；&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;对象句柄：用于区分不同的对象。对象创建好了就会获取一块存储空间，存储空间的地址即为对象的标识，也就是对象的句柄。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;对象属性：用于描述对象的静态特征。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;对象方法：用于描述对象的动态特征。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;如果要创建一个新的且唯一的对象，可使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;&lt;/span&gt;引用符号。例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 1149px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_2&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_2&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=2&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;$对象名称&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp;类名称();&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
 $对象名称 = new &amp;amp;类名称();
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;当类实例化后，可以使用操作符&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&#39;-&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;来调用对该对象的属性和方法。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;3.&lt;/span&gt;&lt;/span&gt;类的属性与方法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;属性的声明：关键字&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;/span&gt;&lt;/span&gt;成员变量名&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;关键字可以是&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;public,private,protected,static&lt;/span&gt;&lt;/span&gt;中的任意一个，默认是&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;public&lt;/span&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;4.&lt;/span&gt;&lt;/span&gt;类的常量&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;常量使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;const&lt;/span&gt;&lt;/span&gt;关键字来定义一个类的常量。类常量不与这个类的任何特定实例相关联，所以不可以使用间接引用操作符来访问它们。类常量通常要大写，如果多个类常量由多个单词组成，建议使用下划线将它们分开。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;5.&lt;/span&gt;&lt;/span&gt;类的构造方法和析构方法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;构造方法：一个类中只能有一个构造方法，构造方法不会被调用，只有在使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;new&lt;/span&gt;&lt;/span&gt;关键字创建对象的时候才会调用构造方法。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 1695px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_3&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_3&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=3&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;类名{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;function__construct(){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;初始化语句;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
 class类名{
  function__construct(){
   初始化语句;
  }
 }
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;在工作中，也可以调用和实例化对象没有任何关系的类构造函数，只须在&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;__construct&lt;/span&gt;&lt;/span&gt;前面加上类名，例如：类名&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;::__construcr();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;析构方法：析构方法与构造方法是相对的，它在某个对象中的所有引用都被删除或对象被显式销毁时执行。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 2061px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_4&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_4&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=4&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;类名{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;__destruct(){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;初始化语句;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
  class类名{
   function __destruct(){
   初始化语句;
   }
  }
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;脚本执行结束时，&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;PHP&lt;/span&gt;&lt;/span&gt;会撤销内存中的所有对象，因此，如果实例化的类和实例时创建的信息都留在内存中，就不需要显示地声明析构函数。但是，如果实例化时创建了不容易丢失的数据，就应该在对象撤销时撤销这些数据，因此就需要定制析构函数。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;6.&lt;/span&gt;&lt;/span&gt;静态属性与方法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;将类中的属性与方法声明为静态的就叫做静态方法。静态方法不受任何具体对象的限制，所以不需要建立实例就可以直接引用类中的静态方法。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;调用方式：类名称&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;::&lt;/span&gt;&lt;/span&gt;静态方法名称&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:WenQuanYi Micro Hei Mono&quot;&gt;注释：&lt;/span&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;span style=&quot;font-family:WenQuanYi Micro Hei Mono,serif&quot;&gt;&#39;::&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family:WenQuanYi Micro Hei Mono&quot;&gt;符号称为范围解析操作符，它可以用于访问静态成员，静态方法和常量，还可以用于覆盖类中的成员和方法。例如：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 2570px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_5&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_5&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=5&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;sta_num{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$num&lt;/span&gt;&lt;span&gt;=0;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;sta_num::&lt;span class=&quot;vars&quot;&gt;$num&lt;/span&gt;&lt;span&gt;++;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
  class sta_num{
   static$num=0;
  }
  sta_num::$num++;
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;如果想在同一类的成员方法中访问静态属性，可以通过在该静态属性的名称前加上操作符&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&#39;self::&#39;&lt;/span&gt;&lt;/span&gt;来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 2883px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_6&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_6&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=6&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;sta_num{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$num&lt;/span&gt;&lt;span&gt;=0;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;add(){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self::&lt;span class=&quot;vars&quot;&gt;$num&lt;/span&gt;&lt;span&gt;++;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;sta_num::&lt;span class=&quot;vars&quot;&gt;$num&lt;/span&gt;&lt;span&gt;++;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
  class sta_num{
   static$num=0;
   function add(){
    self::$num++;
   }
 }
 sta_num::$num++;
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;7.&lt;/span&gt;&lt;/span&gt;对象的克隆&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;通过&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;clone&lt;/span&gt;&lt;/span&gt;后可以得到的对象与原来的对象没有任何关系，它把原来对象的所有信息从内寻的位置中复制了一份，然后在内存中又开辟一个空间来存储克隆后的对象。例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 3286px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_7&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_7&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=7&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;calss&amp;nbsp;a{}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;vars&quot;&gt;$ojectA&lt;/span&gt;&lt;span&gt;=&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;span&gt;&amp;nbsp;a();&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;vars&quot;&gt;$objectB&lt;/span&gt;&lt;span&gt;=&amp;nbsp;clone&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$objectA&lt;/span&gt;&lt;span&gt;;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
 calss a{}
 $ojectA= new a();
 $objectB= clone $objectA;
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;如果在对象中定义了&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;_clone&lt;/span&gt;&lt;/span&gt;方法，则可以在对象被克隆时来调整克隆行为，此方法的代码将在克隆的操作期间来执行。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;8.&lt;/span&gt;&lt;/span&gt;继承&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;在&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;PHP&lt;/span&gt;&lt;/span&gt;中，使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;extends&lt;/span&gt;&lt;/span&gt;关键字来建立一个类的继承。格式如下：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 3618px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_8&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_8&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=8&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;子类名称&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;span&gt;&amp;nbsp;父类名称{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;子类属性；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;子类方法；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;class 子类名称 extends 父类名称{
  子类属性；
  子类方法；
}&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;当子类要调用父类的成员方法时需要用到关键字&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&#39;patent::&#39;,&lt;/span&gt;&lt;/span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;parent::&lt;/span&gt;&lt;/span&gt;父类的成员方法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;9.&lt;/span&gt;&lt;/span&gt;检测对象的类型&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;在&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;php&lt;/span&gt;&lt;/span&gt;中可以使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;instanceof&lt;/span&gt;&lt;/span&gt;运算符来检测当前对象是否属于同一个类。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;10.&lt;/span&gt;&lt;/span&gt;多态&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;（&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;）通过继承抽象类实现多态&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;抽象类里面至少包含一个由关键字&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;abstract&lt;/span&gt;&lt;/span&gt;修饰的抽象方法，抽象方法是不实现具体方法的空方法。抽象类不能被实例化，只能由子类去继承，然后在继承的子类中完成具体功能。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 4146px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_9&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_9&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=9&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;work{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;work_name(&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$name&lt;/span&gt;&lt;span&gt;);&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;man&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;span&gt;&amp;nbsp;work{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;work_name(&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$name&lt;/span&gt;&lt;span&gt;){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;func&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$name&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;is&amp;nbsp;true&#39;&lt;/span&gt;&lt;span&gt;;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;woman&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;span&gt;&amp;nbsp;work{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;work_name(&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$name&lt;/span&gt;&lt;span&gt;){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;func&quot;&gt;echo&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;vars&quot;&gt;$name&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;is&amp;nbsp;false&#39;&lt;/span&gt;&lt;span&gt;;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
 abstract class work{
  abstract function work_name($name);
 }
 class man extends work{
 function work_name($name){
  echo$name.&#39;is true&#39;;
 }
}
class woman extends work{
 function work_name($name){
  echo $name.&#39;is false&#39;;
 }
}
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;对于&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;work&lt;/span&gt;&lt;/span&gt;类而言&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;man&lt;/span&gt;&lt;/span&gt;，&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;woman&lt;/span&gt;&lt;/span&gt;就是它多态的表现。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;（&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;）通过接口实现多态&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;接口是一组成员方法声明的集合，它只包含一些空的成员方法或常量，这些空的成员方法将由实现该接口的类去实现。定义一个接口需要使用&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;声明，定义接口的方法如下：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 4693px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_10&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_10&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=10&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&lt;span&gt;&amp;nbsp;接口名称{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;类常量；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;成员方法_1;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;成员方法_2;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;interface 接口名称{
 类常量；
 function 成员方法_1;
 function 成员方法_2;
}
&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
在接口中不存在构造方法和析构方法，接口可以被继承，它可以继承多个接口，而不能继承一个类。接口的实现需要使用关键字&lt;span style=&quot;font-size:16px; font-family:&#39;Liberation Serif&#39;,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;implements&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size:16px&quot;&gt;。当使用类来实现接口时，必须包含接口定义的所有方法，否则在运行时会出现错误。例如：&lt;/span&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 4953px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_11&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_11&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=11&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&lt;span&gt;&amp;nbsp;people{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;favourate_sport();&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;children&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;&lt;span&gt;&amp;nbsp;people{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;favourate_sport(){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;方法体；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;student&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;&lt;span&gt;&amp;nbsp;people{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span&gt;&amp;nbsp;favourate_sport(){&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;方法体；&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;?&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;save_code tracking-ad&quot; data-mod=&quot;popu_249&quot; style=&quot;display: none;&quot;&gt;&lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;http://static.blog.csdn.net/images/save_snippets.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;php&quot; style=&quot;display: none;&quot;&gt;&amp;lt;?php
  interface people{
   function favourate_sport();
  }
  class  children implements people{
  function favourate_sport(){
  方法体；
  }
 }
 class student implements people{
   function favourate_sport(){
    方法体；
   }
 }
?&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p class=&quot;cjk&quot; style=&quot;margin-bottom:0cm&quot; align=&quot;LEFT&quot;&gt;&lt;span style=&quot;font-size:16px&quot;&gt;对于接口&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;people&lt;/span&gt;&lt;/span&gt;而言，类&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;children&lt;/span&gt;&lt;/span&gt;和&lt;span style=&quot;font-family:Liberation Serif,serif&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;student&lt;/span&gt;&lt;/span&gt;就是其多态的表现。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;dp-highlighter bg_php&quot;&gt;&lt;div class=&quot;bar&quot;&gt;&lt;div class=&quot;tools&quot;&gt;&lt;b&gt;[php]&lt;/b&gt; &lt;a href=&quot;#&quot; class=&quot;ViewSource&quot; title=&quot;view plain&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;&quot;&gt;view plain&lt;/a&gt;&lt;span data-mod=&quot;popu_168&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;CopyToClipboard&quot; title=&quot;copy&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;&quot;&gt;copy&lt;/a&gt;&lt;div style=&quot;position: absolute; left: 488px; top: 5393px; width: 24px; height: 13px; z-index: 99;&quot;&gt;&lt;embed id=&quot;ZeroClipboardMovie_12&quot; src=&quot;http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf&quot; loop=&quot;false&quot; menu=&quot;false&quot; quality=&quot;best&quot; bgcolor=&quot;#ffffff&quot; name=&quot;ZeroClipboardMovie_12&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;false&quot; type=&quot;application/x-shockwave-flash&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;id=12&amp;amp;width=24&amp;amp;height=13&quot; wmode=&quot;transparent&quot; height=&quot;13&quot; width=&quot;24&quot; align=&quot;middle&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;span data-mod=&quot;popu_169&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;PrintSource&quot; title=&quot;print&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;&quot;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;#&quot; class=&quot;About&quot; title=&quot;?&quot; onclick=&quot;dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;&quot;&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start=&quot;1&quot; class=&quot;dp-c&quot;&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;lt;pre&amp;nbsp;name=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;pre&amp;nbsp;name=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;p&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;cjk&quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;style=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;margin-bottom:0cm&quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;align=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;LEFT&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;alt&quot;&gt;&lt;span&gt;&amp;lt;/pre&amp;gt;&amp;nbsp;&amp;nbsp;&lt;span id=&quot;transmark&quot; style=&quot;display: none; width: 0px; height: 0px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP魔术方法和魔术常量介绍及使用</title>
   <link href="/php/2016/03/14/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95"/>
   <updated>2016-03-14T00:00:00+08:00</updated>
   <id>/php/2016/03/14/PHP魔术方法</id>
   <content type="html">&lt;h2 id=&quot;mabov&quot;&gt;魔术方法(&lt;span class=&quot;wp_keywordlink&quot;&gt;&lt;a href=&quot;http://www.codeceo.com/article/magic-javascript-ui.html&quot; title=&quot;Magic&quot; target=&quot;_blank&quot;&gt;Magic&lt;/a&gt;&lt;/span&gt; methods)&lt;/h2&gt;
&lt;p&gt;PHP中把以两个下划线&lt;code&gt;__&lt;/code&gt;开头的方法称为魔术方法，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__construct()&lt;/code&gt;，类的构造函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt;，类的析构函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__call()&lt;/code&gt;，在对象中调用一个不可访问方法时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__callStatic()&lt;/code&gt;，用静态方式中调用一个不可访问方法时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__get()&lt;/code&gt;，获得一个类的成员变量时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__set()&lt;/code&gt;，设置一个类的成员变量时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__isset()&lt;/code&gt;，当对不可访问属性调用&lt;code&gt;isset()&lt;/code&gt;或&lt;code&gt;empty()&lt;/code&gt;时调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__unset()&lt;/code&gt;，当对不可访问属性调用&lt;code&gt;unset()&lt;/code&gt;时被调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__sleep()&lt;/code&gt;，执行&lt;code&gt;serialize()&lt;/code&gt;时，先会调用这个函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__wakeup()&lt;/code&gt;，执行&lt;code&gt;unserialize()&lt;/code&gt;时，先会调用这个函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__toString()&lt;/code&gt;，类被当成字符串时的回应方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__invoke()&lt;/code&gt;，调用函数的方式调用一个对象时的回应方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__set_state()&lt;/code&gt;，调用&lt;code&gt;var_export()&lt;/code&gt;导出类时，此静态方法会被调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__clone()&lt;/code&gt;，当对象复制完成时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tezyp&quot;&gt;&lt;code&gt;__construct()&lt;/code&gt;和&lt;code&gt;__destruct()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;构造函数和析构函数应该不陌生，他们在对象创建和消亡时被调用。例如我们需要打开一个文件，在对象创建时打开，对象消亡时关闭&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FileRead&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; $handle = &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;handle = fopen(...);
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        fclose(&lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;handle);
    }
}
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;这两个方法在继承时可以扩展，例如：&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TmpFileRead&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FileRead&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;parent&lt;/span&gt;::__construct();
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;parent&lt;/span&gt;::__destruct();
    }
}
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ozasa&quot;&gt;&lt;code&gt;__call()&lt;/code&gt;和&lt;code&gt;__callStatic()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在对象中调用一个不可访问方法时会调用这两个方法，后者为静态方法。这两个方法我们在可变方法（Variable functions）调用中可能会用到。&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MethodTest&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__call&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;($name, $arguments)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Calling object method &#39;$name&#39; &quot;&lt;/span&gt;. implode(&lt;span class=&quot;hljs-string&quot;&gt;&#39;, &#39;&lt;/span&gt;, $arguments). &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__callStatic&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;($name, $arguments)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Calling static method &#39;$name&#39; &quot;&lt;/span&gt;. implode(&lt;span class=&quot;hljs-string&quot;&gt;&#39;, &#39;&lt;/span&gt;, $arguments). &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;
    }
}

$obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodTest;
$obj-&amp;gt;runTest(&lt;span class=&quot;hljs-string&quot;&gt;&#39;in object context&#39;&lt;/span&gt;);
MethodTest::runTest(&lt;span class=&quot;hljs-string&quot;&gt;&#39;in static context&#39;&lt;/span&gt;);
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejtvq&quot;&gt;&lt;code&gt;__get()&lt;/code&gt;，&lt;code&gt;__set()&lt;/code&gt;，&lt;code&gt;__isset()&lt;/code&gt;和&lt;code&gt;__unset()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当get/set一个类的成员变量时调用这两个函数。例如我们将对象变量保存在另外一个数组中，而不是对象本身的成员变量&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MethodTest&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; $data = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($name, $value)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data[$name] = $value;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($name)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array_key_exists($name, &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data))
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data[$name];
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__isset&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($name)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data[$name])
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($name)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;unset&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;data[$name]);
    }
}
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;qukds&quot;&gt;&lt;code&gt;__sleep()&lt;/code&gt;和&lt;code&gt;__wakeup()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当我们在执行&lt;code&gt;serialize()&lt;/code&gt;和&lt;code&gt;unserialize()&lt;/code&gt;时，会先调用这两个函数。例如我们在序列化一个对象时，这个对象有一个数据库链接，想要在反序列化中恢复链接状态，则可以通过重构这两个函数来实现链接的恢复。例子如下：&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Connection&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; $link;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; $server, $username, $password, $db;

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;($server, $username, $password, $db)&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;server = $server;
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;username = $username;
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;password = $password;
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;db = $db;
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;connect();
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;link = mysql_connect(&lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;server, &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;username, &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;password);
        mysql_select_db(&lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;db, &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;link);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__sleep&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;server&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;username&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;password&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;db&#39;&lt;/span&gt;);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;connect();
    }
}
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;vzees&quot;&gt;&lt;code&gt;__toString()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;对象当成字符串时的回应方法。例如使用&lt;code&gt;echo $obj;&lt;/code&gt;来输出一个对象&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// Declare a simple class&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestClass&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;this is a object&#39;&lt;/span&gt;;
    }
}

$class = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TestClass();
&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; $class;
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;这个方法只能返回字符串，而且不可以在这个方法中抛出异常，否则会出现致命错误。&lt;/p&gt;
&lt;h3 id=&quot;jhhyi&quot;&gt;&lt;code&gt;__invoke()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用函数的方式调用一个对象时的回应方法。如下&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CallableClass&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__invoke&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;this is a object&#39;&lt;/span&gt;;
    }
}
$obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CallableClass;
var_dump(is_callable($obj));
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;lsmir&quot;&gt;&lt;code&gt;__set_state()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;调用&lt;code&gt;var_export()&lt;/code&gt;导出类时，此静态方法会被调用。&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;A&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; $var1;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; $var2;

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__set_state&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;($an_array)&lt;/span&gt; &lt;/span&gt;{
        $obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; A;
        $obj-&amp;gt;var1 = $an_array[&lt;span class=&quot;hljs-string&quot;&gt;&#39;var1&#39;&lt;/span&gt;];
        $obj-&amp;gt;var2 = $an_array[&lt;span class=&quot;hljs-string&quot;&gt;&#39;var2&#39;&lt;/span&gt;];
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $obj;
    }
}

$a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; A;
$a-&amp;gt;var1 = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;
$a-&amp;gt;var2 = &lt;span class=&quot;hljs-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;;
var_dump(var_export($a));
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ycrcl&quot;&gt;&lt;code&gt;__clone()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;当对象复制完成时调用。例如在&lt;span class=&quot;wp_keywordlink&quot;&gt;&lt;a href=&quot;http://www.codeceo.com/article/category/develop/design-patterns&quot; title=&quot;设计模式&quot; target=&quot;_blank&quot;&gt;设计模式&lt;/a&gt;&lt;/span&gt;详解及PHP实现：单例模式一文中提到的单例模式实现方式，利用这个函数来防止对象被克隆。&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: false; first-line: 1 hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; $_instance = &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;

    &lt;span class=&quot;hljs-comment&quot;&gt;// 私有构造方法 &lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}

    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_null(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;::$_instance)) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;::$_instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Singleton();
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;::$_instance;
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 防止克隆实例&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Clone is not allowed.&#39;&lt;/span&gt; . E_USER_ERROR);
    }
}
&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;h2 id=&quot;rfjwk&quot;&gt;魔术常量(Magic constants)&lt;/h2&gt;
&lt;p&gt;PHP中的常量大部分都是不变的，但是有8个常量会随着他们所在代码位置的变化而变化，这8个常量被称为魔术常量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__LINE__&lt;/code&gt;，文件中的当前行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FILE__&lt;/code&gt;，文件的完整路径和文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__DIR__&lt;/code&gt;，文件所在的目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FUNCTION__&lt;/code&gt;，函数名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__CLASS__&lt;/code&gt;，类的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__TRAIT__&lt;/code&gt;，Trait的名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__METHOD__&lt;/code&gt;，类的方法名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__NAMESPACE__&lt;/code&gt;，当前命名空间的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些魔术常量常常被用于获得当前环境信息或者记录日志。&lt;span id=&quot;transmark&quot; style=&quot;display: none; width: 0px; height: 0px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>javaScript面向对象编程</title>
   <link href="/javascript/2016/02/22/javaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B"/>
   <updated>2016-02-22T00:00:00+08:00</updated>
   <id>/javascript/2016/02/22/javaScript面向对象编程</id>
   <content type="html">&lt;p&gt;JavaScript的所有数据都可以看成对象，那是不是我们已经在使用面向对象编程了呢？&lt;/p&gt;
&lt;p&gt;当然不是。如果我们只使用&lt;code&gt;Number&lt;/code&gt;、&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;以及基本的&lt;code&gt;{...}&lt;/code&gt;定义的对象，还无法发挥出面向对象编程的威力。&lt;/p&gt;
&lt;p&gt;JavaScript的面向对象编程和大多数其他语言如Java、C#的面向对象编程都不太一样。如果你熟悉Java或C#，很好，你一定明白面向对象的两个基本概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类：类是对象的类型模板，例如，定义&lt;code&gt;Student&lt;/code&gt;类来表示学生，类本身是一种类型，&lt;code&gt;Student&lt;/code&gt;表示学生类型，但不表示任何具体的某个学生；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例：实例是根据类创建的对象，例如，根据&lt;code&gt;Student&lt;/code&gt;类可以创建出&lt;code&gt;xiaoming&lt;/code&gt;、&lt;code&gt;xiaohong&lt;/code&gt;、&lt;code&gt;xiaojun&lt;/code&gt;等多个实例，每个实例表示一个具体的学生，他们全都属于&lt;code&gt;Student&lt;/code&gt;类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，类和实例是大多数面向对象编程语言的基本概念。&lt;/p&gt;
&lt;p&gt;不过，在JavaScript中，这个概念需要改一改。JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。&lt;/p&gt;
&lt;p&gt;原型是指当我们想要创建&lt;code&gt;xiaoming&lt;/code&gt;这个具体的学生时，我们并没有一个&lt;code&gt;Student&lt;/code&gt;类型可用。那怎么办？恰好有这么一个现成的对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var robot = {
    name: &amp;#39;Robot&amp;#39;,
    height: 1.6,
    run: function () {
        console.log(this.name + &amp;#39; is running...&amp;#39;);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们看这个&lt;code&gt;robot&lt;/code&gt;对象有名字，有身高，还会跑，有点像小明，干脆就根据它来“创建”小明得了！&lt;/p&gt;
&lt;p&gt;于是我们把它改名为&lt;code&gt;Student&lt;/code&gt;，然后创建出&lt;code&gt;xiaoming&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Student = {
    name: &amp;#39;Robot&amp;#39;,
    height: 1.2,
    run: function () {
        console.log(this.name + &amp;#39; is running...&amp;#39;);
    }
};

var xiaoming = {
    name: &amp;#39;小明&amp;#39;
};

xiaoming.__proto__ = Student;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意最后一行代码把&lt;code&gt;xiaoming&lt;/code&gt;的原型指向了对象&lt;code&gt;Student&lt;/code&gt;，看上去&lt;code&gt;xiaoming&lt;/code&gt;仿佛是从&lt;code&gt;Student&lt;/code&gt;继承下来的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xiaoming.name; // &amp;#39;小明&amp;#39;
xiaoming.run(); // 小明 is running...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;xiaoming&lt;/code&gt;有自己的&lt;code&gt;name&lt;/code&gt;属性，但并没有定义&lt;code&gt;run()&lt;/code&gt;方法。不过，由于小明是从&lt;code&gt;Student&lt;/code&gt;继承而来，只要&lt;code&gt;Student&lt;/code&gt;有&lt;code&gt;run()&lt;/code&gt;方法，&lt;code&gt;xiaoming&lt;/code&gt;也可以调用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/files/attachments/001435287613668a73ab76ccc85411282c1b1370be41636000/l&quot; alt=&quot;xiaoming-prototype&quot; /&gt;&lt;/p&gt;
&lt;p&gt;JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。&lt;/p&gt;
&lt;p&gt;如果你把&lt;code&gt;xiaoming&lt;/code&gt;的原型指向其他对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Bird = {
    fly: function () {
        console.log(this.name + &amp;#39; is flying...&amp;#39;);
    }
};

xiaoming.__proto__ = Bird;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在&lt;code&gt;xiaoming&lt;/code&gt;已经无法&lt;code&gt;run()&lt;/code&gt;了，他已经变成了一只鸟：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xiaoming.fly(); // 小明 is flying...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在JavaScrip代码运行时期，你可以把&lt;code&gt;xiaoming&lt;/code&gt;从&lt;code&gt;Student&lt;/code&gt;变成&lt;code&gt;Bird&lt;/code&gt;，或者变成任何对象。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;请注意&lt;/em&gt;，上述代码仅用于演示目的。在编写JavaScript代码时，不要直接用&lt;code&gt;obj.__proto__&lt;/code&gt;去改变一个对象的原型，并且，低版本的IE也无法使用&lt;code&gt;__proto__&lt;/code&gt;。&lt;code&gt;Object.create()&lt;/code&gt;方法可以传入一个原型对象，并创建一个基于该原型的新对象，但是新对象什么属性都没有，因此，我们可以编写一个函数来创建&lt;code&gt;xiaoming&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 原型对象:
var Student = {
    name: &amp;#39;Robot&amp;#39;,
    height: 1.2,
    run: function () {
        console.log(this.name + &amp;#39; is running...&amp;#39;);
    }
};

function createStudent(name) {
    // 基于Student原型创建一个新对象:
    var s = Object.create(Student);
    // 初始化新对象:
    s.name = name;
    return s;
}

var xiaoming = createStudent(&amp;#39;小明&amp;#39;);
xiaoming.run(); // 小明 is running...
xiaoming.__proto__ === Student; // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是创建原型继承的一种方法，JavaScript还有其他方法来创建对象，我们在后面会一一讲到。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>正则表达式</title>
   <link href="/javascript/2016/02/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"/>
   <updated>2016-02-16T00:00:00+08:00</updated>
   <id>/javascript/2016/02/16/正则表达式</id>
   <content type="html">&lt;p class=&quot;p0&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;1.1 什么是正则表达式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;正则表达式是一种特殊的字符串模式，用于匹配一组字符串，就好比用模具做产品，而正则就是这个模具，定义一种规则去匹配符合规则的字符。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.2 常用的正则匹配工具&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;在线匹配工具：&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　1&amp;nbsp;http://www.regexpal.com/&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 2 http://rubular.com/&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;正则匹配软件&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://pan.baidu.com/s/19Yn49&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;McTracer&lt;/span&gt;&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 用过几个之后还是觉得这个是最好用的，支持将正则导成对应的语言如java C# js等还帮你转义了，Copy直接用就行了很方便，另外支持把正则表达式用法解释，如哪一段是捕获分组，哪段是贪婪匹配等等，总之用起来 So Happy .&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;二 正则字符简单介绍&lt;/h3&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.1 元字符介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;^&quot;&lt;/strong&gt; ：^会匹配行或者字符串的起始位置，有时还会匹配整个文档的起始位置。&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;$&quot;&lt;/strong&gt; &amp;nbsp;：$会匹配行或字符串的结尾&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; 如图&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;而且被匹配的字符必须是以This开头有空格也不行，必须以Regex结尾，也不能有空格与其它字符&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/366784/201311/23112422-56df0ef3f54c42abb55e7cabd5278824.png&quot; alt=&quot;&quot; /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img src=&quot;http://images.cnitblog.com/blog/366784/201311/23112601-f5e9f5c0ddd7417eb28ac7d0734f8b8f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt;&quot;\b&quot;&lt;/strong&gt; :不会消耗任何字符只匹配一个位置，常用于匹配单词边界 如 我想从字符串中&quot;This is Regex&quot;匹配单独的单词 &quot;is&quot; 正则就要写成 &quot;\bis\b&quot; &amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp;\b 不会匹配is 两边的字符，但它会识别is 两边是否为单词的边界&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt;&quot;\d&quot;&lt;/strong&gt;: 匹配数字，&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp;例如要匹配一个固定格式的电话号码以0开头前4位后7位，如0737-5686123 &amp;nbsp;正则:^0\d\d\d-\d\d\d\d\d\d\d$ 这里只是为了介绍&quot;\d&quot;字符，实际上有更好的写法会在 &amp;nbsp; &amp;nbsp; 下面介绍。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt;&quot;\w&quot;&lt;/strong&gt;：&lt;span&gt;匹配字母，数字，下划线.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;　　 &amp;nbsp;例如我要匹配&quot;a2345BCD__TTz&quot; 正则：&quot;\w+&quot; &amp;nbsp;这里的&quot;+&quot;字符为一个量词指重复的次数，稍后会详细介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt;&quot;\s&quot;&lt;/strong&gt;：匹配空格&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp;例如字符 &quot;a b c&quot; 正则：&quot;\w\s\w\s\w&quot; &amp;nbsp;一个字符后跟一个空格，如有字符间有多个空格直接把&quot;\s&quot; 写成 &quot;\s+&quot; 让空格重复&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt; &quot;.&quot;&lt;/strong&gt;：&lt;span&gt;匹配除了换行符以外的任何字符 &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;　　 &amp;nbsp;这个算是&quot;\w&quot;的加强版了&quot;\w&quot;不能匹配 空格 如果把字符串加上空格用&quot;\w&quot;就受限了，看下用 &quot;.&quot;是如何匹配字符&quot;a23 4 5 B C D__TTz&quot; &amp;nbsp;正则：&quot;.+&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&amp;nbsp; &lt;strong&gt;&quot;[abc]&quot;&lt;/strong&gt;: 字符组 &amp;nbsp;匹配包含括号内元素的字符&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 这个比较简单了只匹配括号内存在的字符，还可以写成[a-z]匹配a至z的所以字母就等于可以用来控制只能输入英文了，&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;2.2 几种反义&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;　　写法很简单改成大写就行了，意思与原来的相反，这里就不举例子了&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;\W&quot;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;匹配任意不是字母，数字，下划线 的字符&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;\S&quot;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;匹配任意不是空白符的字符&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　&quot;\D&quot;&lt;/strong&gt; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;匹配任意非数字的字符&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp; &lt;strong&gt;&amp;nbsp;&quot;\B&quot;&lt;/strong&gt; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;匹配不是单词开头或结束的位置&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;[^abc]&quot;&lt;/strong&gt; &amp;nbsp;&lt;/span&gt;&lt;/span&gt;匹配除了abc以外的任意字符&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;strong&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.3 &amp;nbsp;量词&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　先解释关于量词所涉及到的重要的三个概念&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; 贪婪(贪心) 如&quot;*&quot;字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果 失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比下面两种贪婪量词对资源的消耗是最大的，&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;懒惰(勉强) 如 &quot;?&quot; &amp;nbsp;懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;占有 &amp;nbsp;如&quot;+&quot; 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;strong&gt;&amp;nbsp;&quot;*&quot;(贪婪)&lt;/strong&gt; &amp;nbsp;&amp;nbsp;重复零次或更多&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　　 &amp;nbsp;例如&quot;aaaaaaaa&quot; 匹配字符串中所有的a &amp;nbsp;正则： &quot;a*&quot; &amp;nbsp; 会出到所有的字符&quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;+&quot;(懒惰)&lt;/strong&gt; &amp;nbsp;&amp;nbsp;重复一次或更多次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp; 例如&quot;aaaaaaaa&quot;&amp;nbsp;匹配字符串中所有的a &amp;nbsp;正则： &quot;a+&quot; &amp;nbsp;会取到字符中所有的a字符， &amp;nbsp;&quot;a+&quot;与&quot;a*&quot;不同在于&quot;+&quot;至少是一次而&quot;*&quot; 可以是0次，&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp; 稍后会与&quot;?&quot;字符结合来体现这种区别&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;?&quot;(占有)&lt;/strong&gt; &amp;nbsp;&amp;nbsp;重复零次或一次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp; 例如&quot;aaaaaaaa&quot;&amp;nbsp;匹配字符串中的a 正则 ：&amp;nbsp;&quot;a?&quot; 只会匹配一次，也就是结果只是单个字符a&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　 &amp;nbsp;&lt;strong&gt;&quot;{n}&quot;&lt;/strong&gt; &amp;nbsp;重复n次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp; 例如从&quot;aaaaaaaa&quot;&amp;nbsp;匹配字符串的a 并重复3次 正则： &amp;nbsp;&quot;a{3}&quot; &amp;nbsp;结果就是取到3个a字符 &amp;nbsp;&quot;aaa&quot;;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　 &amp;nbsp;&lt;strong&gt;&quot;{n,m}&quot;&lt;/strong&gt; &amp;nbsp;重复n到m次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp; 例如正则 &quot;a{3,4}&quot; 将a重复匹配3次或者4次 所以供匹配的字符可以是三个&quot;aaa&quot;也可以是四个&quot;aaaa&quot; 正则都可以匹配到&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;strong&gt;&quot;{n,}&quot;&lt;/strong&gt; &amp;nbsp;重复n次或更多次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;　　 &amp;nbsp; &amp;nbsp;与{n,m}不同之处就在于匹配的次数将没有上限，但至少要重复n次 如 正则&quot;a{3,}&quot; a至少要重复3次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;把量词了解了之后之前匹配电话号码的正则现在就可以改得简单点了^0\d\d\d-\d\d\d\d\d\d\d&lt;span class=&quot;MathJax_Preview&quot; style=&quot;color: inherit;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;MathJax&quot; id=&quot;MathJax-Element-1-Frame&quot; tabindex=&quot;0&quot; style=&quot;position: relative;&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x53EF;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x4EE5;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x6539;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x4E3A;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;quot;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;0&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;mtext mathcolor=&amp;quot;red&amp;quot;&amp;gt;\d&amp;lt;/mtext&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mtext mathcolor=&amp;quot;red&amp;quot;&amp;gt;\d&amp;lt;/mtext&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;7&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/math&amp;gt;&quot; role=&quot;presentation&quot;&gt;&lt;nobr aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;math&quot; id=&quot;MathJax-Span-1&quot; role=&quot;math&quot; style=&quot;width: 11.481em; display: inline-block;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 9.169em; height: 0px; font-size: 125%;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(1.135em, 1009.15em, 2.588em, -1000em); top: -2.154em; left: 0em;&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-2&quot;&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-3&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-4&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-5&quot;&gt;&lt;span style=&quot;font-family: STIXGeneral,&amp;quot;Arial Unicode MS&amp;quot;,serif; font-size: 80%; font-style: normal; font-weight: normal;&quot;&gt;可&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-6&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-7&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-8&quot;&gt;&lt;span style=&quot;font-family: STIXGeneral,&amp;quot;Arial Unicode MS&amp;quot;,serif; font-size: 80%; font-style: normal; font-weight: normal;&quot;&gt;以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-9&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-10&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-11&quot;&gt;&lt;span style=&quot;font-family: STIXGeneral,&amp;quot;Arial Unicode MS&amp;quot;,serif; font-size: 80%; font-style: normal; font-weight: normal;&quot;&gt;改&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-12&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-13&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-14&quot;&gt;&lt;span style=&quot;font-family: STIXGeneral,&amp;quot;Arial Unicode MS&amp;quot;,serif; font-size: 80%; font-style: normal; font-weight: normal;&quot;&gt;为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;msubsup&quot; id=&quot;MathJax-Span-15&quot; style=&quot;padding-left: 0.278em;&quot;&gt;&lt;span style=&quot;display: inline-block; position: relative; width: 0.929em; height: 0px;&quot;&gt;&lt;span style=&quot;position: absolute; clip: rect(3.121em, 1000.37em, 3.806em, -1000em); top: -4em; left: 0em;&quot;&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-16&quot; style=&quot;font-family: MathJax_Main;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 4em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;position: absolute; top: -4.363em; left: 0.5em;&quot;&gt;&lt;span class=&quot;mn&quot; id=&quot;MathJax-Span-17&quot; style=&quot;font-size: 70.7%; font-family: MathJax_Main;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 4em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mtext&quot; id=&quot;MathJax-Span-18&quot; style=&quot;font-family: MathJax_Main; padding-left: 0.278em; color: red;&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-19&quot; style=&quot;font-family: MathJax_Main; padding-left: 0.222em;&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot; id=&quot;MathJax-Span-20&quot; style=&quot;font-family: MathJax_Main; padding-left: 0.222em;&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mtext&quot; id=&quot;MathJax-Span-21&quot; style=&quot;font-family: MathJax_Main; color: red;&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;texatom&quot; id=&quot;MathJax-Span-22&quot;&gt;&lt;span class=&quot;mrow&quot; id=&quot;MathJax-Span-23&quot;&gt;&lt;span class=&quot;mn&quot; id=&quot;MathJax-Span-24&quot; style=&quot;font-family: MathJax_Main;&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; width: 0px; height: 2.154em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: inline-block; overflow: hidden; vertical-align: -0.389em; border-left: 0px solid; width: 0px; height: 1.509em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;span id=&quot;transmark&quot; style=&quot;display: none; width: 0px; height: 0px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot; role=&quot;presentation&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mo&gt;可&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mo&gt;以&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mo&gt;改&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mo&gt;为&lt;/mo&gt;&lt;/mrow&gt;&lt;msup&gt;&lt;mo&gt;&quot;&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mtext mathcolor=&quot;red&quot;&gt;\d&lt;/mtext&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext mathcolor=&quot;red&quot;&gt;\d&lt;/mtext&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mn&gt;7&lt;/mn&gt;&lt;/mrow&gt;&lt;/math&gt;&lt;/span&gt;&lt;/span&gt;&lt;script type=&quot;math/tex&quot; id=&quot;MathJax-Element-1&quot;&gt; 可以改为&quot;^0\d+-\d{7}&lt;/script&gt;&quot;。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;这样写还不够完美如果因为前面的区号没有做限定，以至于可以输入很多们，而通常只能是3位或者4位，&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;现在再改一下 &quot;^0\d{2,3}-\d{7}&quot;如此一来区号部分就可以匹配3位或者4位的了&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;&amp;nbsp;2.4 懒惰限定符&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　&lt;strong&gt;&quot;*?&quot;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;重复任意次，但尽可能少重复&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp;如 &quot;acbacb&quot; &amp;nbsp;正则 &amp;nbsp;&quot;a.*?b&quot; 只会取到第一个&quot;acb&quot; 原本可以全部取到但加了限定符后，只会匹配尽可能少的字符 ，而&quot;acbacb&quot;最少字符的结果就是&quot;acb&quot;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　&lt;strong&gt;&quot;+?&quot;&lt;/strong&gt; &amp;nbsp;重复1次或更多次，但尽可能少重复&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; 与上面一样，只是至少要重复1次&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　&lt;strong&gt;&quot;??&quot;&lt;/strong&gt; &amp;nbsp;重复0次或1次，但尽可能少重复&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　 &amp;nbsp; &amp;nbsp;如 &quot;aaacb&quot; 正则 &quot;a.??b&quot; 只会取到最后的三个字符&quot;acb&quot;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　&lt;strong&gt;&quot;{n,m}?&quot;&lt;/strong&gt; &amp;nbsp;重复n到m次，但尽可能少重复&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 如 &quot;aaaaaaaa&quot; &amp;nbsp;正则 &quot;a{0,m}&quot; 因为最少是0次所以取到结果为空&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　&lt;strong&gt;&quot;{n,}?&quot; &amp;nbsp;&lt;/strong&gt; &amp;nbsp;重复n次以上，但尽可能少重复&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 如 &quot;aaaaaaa&quot; &amp;nbsp;正则 &quot;a{1,}&quot; 最少是1次所以取到结果为 &quot;a&quot;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;三 &amp;nbsp;正则进阶&lt;/h3&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt; &amp;nbsp;3.1 捕获分组&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;　　先了解在正则中捕获分组的概念，其实就是一个括号内的内容 如 &quot;(\d)\d&quot; 而&quot;(\d)&quot; 这就是一个捕获分组，可以对捕获分组进行 后向引用 (如果后而有相同的内容则可以直接引用前面定义的捕获组，以简化表达式) 如(\d)\d\1 这里的&quot;\1&quot;就是对&quot;(\d)&quot;的后向引用&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;那捕获分组有什么用呢看个例子就知道了&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;如 &amp;nbsp;&quot;zery zery&quot; 正则 \b(\w+)\b\s\1\b 所以这里的&quot;\1&quot;所捕获到的字符也是 与(\w+)一样的&quot;zery&quot;，为了让组名更有意义，组名是可以自定义名字的&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&quot;\b(?&amp;lt;name&amp;gt;\w+)\b\s\k&amp;lt;name&amp;gt;\b&quot; 用&quot;?&amp;lt;name&amp;gt;&quot;就可以自定义组名了而要后向引用组时要记得写成 &quot;\k&amp;lt;name&amp;gt;&quot;;自定义组名后,捕获组中匹配到的值就会保存在定义的组名里&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;下面列出捕获分组常有的用法&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;strong&gt;&quot;(exp)&quot;&lt;/strong&gt; &amp;nbsp; &amp;nbsp;&lt;span&gt;匹配exp,并捕获文本到自动命名的组里&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;strong&gt;&quot;(?&amp;lt;name&amp;gt;exp)&quot;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&lt;span&gt;匹配exp,并捕获文本到名称为name的组里&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;strong&gt;&quot;(?:exp)&quot;&lt;/strong&gt; &amp;nbsp;&lt;span&gt;匹配exp,不捕获匹配的文本，也不给此分组分配组号&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;以下为零宽断言&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;strong&gt;&quot;(?=exp)&quot;&lt;/strong&gt; &amp;nbsp;&lt;span&gt;匹配exp前面的位置&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;　　如 &quot;How are you doing&quot; 正则&quot;(?&amp;lt;txt&amp;gt;.+(?=ing))&quot; 这里取ing前所有的字符，并定义了一个捕获分组名字为 &quot;txt&quot; 而&quot;txt&quot;这个组里的值为&quot;How are you do&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;strong&gt;&quot;(?&amp;lt;=exp)&quot;&lt;/strong&gt; &amp;nbsp;&lt;span&gt;匹配exp后面的位置&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;　　如 &quot;How are you doing&quot; 正则&quot;(?&amp;lt;txt&amp;gt;(?&amp;lt;=How).+)&quot; 这里取&quot;How&quot;之后所有的字符，并定义了一个捕获分组名字为 &quot;txt&quot; 而&quot;txt&quot;这个组里的值为&quot;&amp;nbsp;are you doing&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&quot;(?!exp)&quot;&lt;/strong&gt; &amp;nbsp;&lt;span&gt;匹配后面跟的不是exp的位置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　如 &quot;123abc&quot; 正则 &quot;\d{3}(?!\d)&quot;匹配3位数字后非数字的结果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&quot;(?&amp;lt;!exp)&quot;&lt;/strong&gt; &amp;nbsp;&lt;span&gt;匹配前面不是exp的位置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　如 &quot;abc123 &quot; 正则 &quot;(?&amp;lt;![0-9])123&quot; 匹配&quot;123&quot;前面是非数字的结果也可写成&quot;(?!&amp;lt;\d)123&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;四 &amp;nbsp;正则实战&lt;/h3&gt;
&lt;p class=&quot;p0&quot;&gt;　　正则在做验证，与数据过滤时体现的威力是巨大的，我想用过的朋友都知道，下面我们把刚刚了解的全部结合起来做一次实战 做数据采集用正则过滤Html标签并取相应的数据&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;我们的战场就选在博客园吧，假设现在要采集博客园首页的所有文章信息 包括文章标题，链接接 作者博客地址，文章简介，文章发布时间，阅读数据，评论数 ，推荐数。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;先看博客园文章的Html格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;copyCnblogsCode(this)&quot; title=&quot;复制代码&quot;&gt;&lt;img src=&quot;//common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot; onclick=&quot;copyCnblogsCode(this)&quot; href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;post_item&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;digg&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;diggit&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; onclick&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;DiggIt(3439076,120879,1)&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;diggnum&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; id&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;digg_count_3439076&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;4&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;clear&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;digg_tip_3439076&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;digg_tip&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;post_item_body&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;titlelnk&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; href&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://www.cnblogs.com/swq6413/p/3439076.html&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; target&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;_blank&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;分享完整的项目工程目录结构&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;h3&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;p &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;post_item_summary&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://www.cnblogs.com/swq6413/&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; target&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;_blank&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;img &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;48&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; height&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;48&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;pfs&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; src&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://pic.cnitblog.com/face/142964/20131116170946.png&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; alt&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;    在项目开发过程中，如何有序的保存项目中的各类数据文件，建立一个分类清晰、方便管理的目录结构是非常重要的。 综合以前的项目和一些朋友的项目结构，我整理了一份我觉得还不错的项目目录结构。 在这里分享给大家，欢迎各位提出你宝贵的意见和建议。如果喜欢请“推荐”则个，感激万分！！ 整个目录设置到4级子目录，实...
     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;post_item_foot&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://www.cnblogs.com/swq6413/&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;lightblue&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;七少爷&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
     发布于 2013-11-23 15:48
     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;article_comment&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://www.cnblogs.com/swq6413/p/3439076.html#commentform&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; title&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;2013-11-23 16:40&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;gray&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
         评论(4)&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;article_view&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;http://www.cnblogs.com/swq6413/p/3439076.html&quot;&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;gray&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;阅读(206)&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;span&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;=&quot;clear&quot;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;div&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot; onclick=&quot;copyCnblogsCode(this)&quot; href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;copyCnblogsCode(this)&quot; title=&quot;复制代码&quot;&gt;&lt;img src=&quot;//common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;通过构造一个Http请求来取到数据并对数据进行相应处理得到关键信息，在过滤Html标签取文章时正则的强大的威力就体现出来了，&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;正则的知识点也都基本用上了比如 &quot;\s \w+ . * ? &quot;还有捕获分组，零宽断言等等。喜欢的朋友可以试一试，然后自己看如何通过正则取相应数据的，代码中的正则都是很基本简单的，其意思与用法都在上文中详细写了。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;copyCnblogsCode(this)&quot; title=&quot;复制代码&quot;&gt;&lt;img src=&quot;//common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot; onclick=&quot;copyCnblogsCode(this)&quot; href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;pre&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Program
     {
         &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; Main(&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;[] args)
         {

             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; content =&lt;span style=&quot;color: #000000;&quot;&gt; HttpUtility.HttpGetHtml();
             HttpUtility.GetArticles(content);
         }
     }

     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpUtility
     {
         &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;默认获取第一页数据&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpGetHtml()
         {
             HttpWebRequest request &lt;/span&gt;= (HttpWebRequest)WebRequest.Create(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://www.cnblogs.com/&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
             request.Accept &lt;/span&gt;= &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;text/plain, */*; q=0.01&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             request.Method &lt;/span&gt;= &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             request.Headers.Add(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Accept-Language&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
             request.ContentLength &lt;/span&gt;= &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
            &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
             request.Host &lt;/span&gt;= &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;www.cnblogs.com&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             request.UserAgent &lt;/span&gt;= &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Maxthon/4.1.3.5000 Chrome/26.0.1410.43 Safari/537.1&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             HttpWebResponse response &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (HttpWebResponse)request.GetResponse();
             Stream responStream &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; response.GetResponseStream();
             StreamReader reader &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StreamReader(responStream, Encoding.UTF8);
             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; content =&lt;span style=&quot;color: #000000;&quot;&gt; reader.ReadToEnd();
             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; content;

         }

         &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; List&amp;lt;Article&amp;gt; GetArticles(&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; htmlString)
         {
             List&lt;/span&gt;&amp;lt;Article&amp;gt; articleList = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; List&amp;lt;Article&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;();
             Regex regex &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             Article article &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
             regex &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;div class=\&quot;post_item\&quot;&amp;gt;(?&amp;lt;content&amp;gt;.*?)(?=&amp;lt;div class=\&quot;clear\&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; + &lt;span style=&quot;color: #800000;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;/div&amp;gt;\s*&amp;lt;/div&amp;gt;)&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,
                               RegexOptions.Singleline);

             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (regex.IsMatch(htmlString))
             {
                 MatchCollection aritcles &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; regex.Matches(htmlString);

                 &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;foreach&lt;/span&gt; (Match item &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; aritcles)
                 {
                     article &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Article();
                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取推荐&lt;/span&gt;
                     regex =
                         &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Regex(
                             &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;div class=\&quot;digg\&quot;&amp;gt;.*&amp;lt;span.*&amp;gt;(?&amp;lt;digNum&amp;gt;.*)&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; + &lt;span style=&quot;color: #800000;&quot;&gt;@&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +
                             &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;.*&amp;lt;div class=\&quot;post_item_body\&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     article.DiggNum &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;digNum&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取文章标题 需要去除转义字符&lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;h3&amp;gt;(?&amp;lt;a&amp;gt;.*)&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; a = regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     regex &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;a\\s.*href=\&quot;(?&amp;lt;href&amp;gt;.*?)\&quot;.*&amp;gt;(?&amp;lt;summary&amp;gt;.*)&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     article.AritcleUrl &lt;/span&gt;= regex.Match(a).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     article.AritcleTitle &lt;/span&gt;= regex.Match(a).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;summary&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取作者图片 &lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;a.*&amp;gt;(?&amp;lt;img&amp;gt;&amp;lt;img[^&amp;gt;].*&amp;gt;)&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     article.AuthorImg &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;img&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取作者博客URL及链接的target属性&lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;a\\s*?href=\&quot;(?&amp;lt;href&amp;gt;.*)\&quot;\\s*?target=\&quot;(?&amp;lt;target&amp;gt;.*?)\&quot;&amp;gt;.*&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,
                                       RegexOptions.Singleline);
                     article.AuthorUrl &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;href&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; urlTarget = regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;target&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取文章简介
                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;1 先取summary Div中所有内容&lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;p class=\&quot;post_item_summary\&quot;&amp;gt;(?&amp;lt;summary&amp;gt;.*)&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; summary = regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;summary&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;2 取简介&lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;(?&amp;lt;indroduct&amp;gt;(?&amp;lt;=&amp;lt;/a&amp;gt;).*)&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     article.AritcleInto &lt;/span&gt;= regex.Match(summary).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;indroduct&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;


                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取发布人与发布时间&lt;/span&gt;
                     regex =
                         &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Regex(
                             &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;div class=\&quot;post_item_foot\&quot;&amp;gt;\\s*&amp;lt;a.*?&amp;gt;(?&amp;lt;publishName&amp;gt;.*)&amp;lt;/a&amp;gt;(?&amp;lt;publishTime&amp;gt;.*)&amp;lt;span class=\&quot;article_comment\&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,
                             RegexOptions.Singleline);
                     article.Author &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;publishName&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     article.PublishTime &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;publishTime&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value.Trim();

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取评论数&lt;/span&gt;
                     regex =
                         &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Regex(
                             &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;span class=\&quot;article_comment\&quot;&amp;gt;&amp;lt;a.*&amp;gt;(?&amp;lt;comment&amp;gt;.*)&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=\&quot;article_view\&quot;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;,
                             RegexOptions.Singleline);
                     article.CommentNum &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;comment&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;

                     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;取阅读数&lt;/span&gt;
                     regex = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Regex(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&amp;lt;span\\s*class=\&quot;article_view\&quot;&amp;gt;&amp;lt;a.*&amp;gt;(?&amp;lt;readNum&amp;gt;.*)&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.Singleline);
                     article.ReadNum &lt;/span&gt;= regex.Match(item.Value).Groups[&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;readNum&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;].Value;
                     articleList.Add(article);
                 }

             }
             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; articleList;
         }



         &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; ClearSpecialTag(&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; htmlString)
         {

             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; htmlStr = Regex.Replace(htmlString, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.IgnoreCase);
             htmlStr &lt;/span&gt;= Regex.Replace(htmlStr, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\t&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.IgnoreCase);
             htmlStr &lt;/span&gt;= Regex.Replace(htmlStr, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\r&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.IgnoreCase);
             htmlStr &lt;/span&gt;= Regex.Replace(htmlStr, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, RegexOptions.IgnoreCase);
             &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; htmlStr;
         }
     }

     &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Article
     {
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 文章标题
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; AritcleTitle { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 文章链接
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; AritcleUrl { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 文章简介
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; AritcleInto { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 作者名
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; Author { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 作者地址
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; AuthorUrl { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 作者图片
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; AuthorImg { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 发布时间
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; PublishTime { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 推荐数
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; DiggNum { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }

         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 评论数
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; CommentNum { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 阅读数
         &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;///&lt;/span&gt; &lt;span style=&quot;color: #808080;&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
         &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;string&lt;/span&gt; ReadNum { &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;; }

     }&lt;/span&gt;&lt;/pre&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot; onclick=&quot;copyCnblogsCode(this)&quot; href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
 &lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;copyCnblogsCode(this)&quot; title=&quot;复制代码&quot;&gt;&lt;img src=&quot;//common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;正则部分可能写得不很完美，但至少也匹配出来了，另外因为自己也是刚接触正则，也只能写出这种比较简单的正则。还望大家海涵~~&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;五 &amp;nbsp; &amp;nbsp;总结&lt;/h3&gt;
&lt;p class=&quot;p0&quot;&gt;　　正则其实并不难，了解每个符号的意思后，自己马上动手试一试多写几次自然就明白了，正则是出了名的坑多，随便少写了个点就匹配不到数据了，我也踩了很多坑，踩着踩着就踩出经验了。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;本文也只是对正则做了很基本的介绍，还有很多正则的字符没有介绍，只是写了比较常用的一些。&lt;/p&gt;
&lt;p&gt;&amp;lt;/div&amp;gtamp;lt;p class=&quot;p0&quot;&amp;gt;这样写还不够完美如果因为前面的区号没有做限定，以至于可以输入很多们，而通常只能是3位或者4位，&amp;lt;/p&amp;lt;p class=&quot;p0&quot;&amp;gt;本文也只是对正则做了很基本的介绍，还有很多正则的字符没有介绍，只是写了比较常用的一些。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript</title>
   <link href="/js/2016/02/11/JavaScript"/>
   <updated>2016-02-11T00:00:00+08:00</updated>
   <id>/js/2016/02/11/JavaScript</id>
   <content type="html">&lt;h3&gt;javascript简介&lt;/h3&gt;

&lt;p&gt;JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，
广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。在1995年时，由Netscape公司
的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。
但实际上它的语法风格与Self及Scheme较为接近。为了取得技术优势，微软推出了JScript，CEnvi推出ScriptEase，与JavaScript同样可在浏览器上运行。
为了统一规格，因为JavaScript兼容于ECMA标准，因此也称为ECMAScript。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基本特点&lt;/p&gt;

    &lt;p&gt;JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。
  1.是一种解释性脚本语言（代码不进行预编译）。
  2.主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。
  3.可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。
  4.跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日常用途&lt;/p&gt;

    &lt;p&gt;1.嵌入动态文本于HTML页面。
  2.对浏览器事件做出响应。
  3.读写HTML元素。
  4.在数据被提交到服务器之前验证数据。
  5.检测访客的浏览器信息。
  6.控制cookies，包括创建和修改等。
  7.基于Node.js技术进行服务器端编程。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascript-1&quot;&gt;javascript语法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;运算符：有7类运算符，分别为：
    &lt;ul&gt;
      &lt;li&gt;赋值运算符（=，+=，-=，*=，/=，%=，«=,»=,&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;=,&amp;amp;=);&lt;/li&gt;
      &lt;li&gt;算术运算符（+, -,*,/,%,++,–);&lt;/li&gt;
      &lt;li&gt;比较运算符（&amp;gt;,&amp;lt;,&amp;lt;=,&amp;gt;=,=,!=);&lt;/li&gt;
      &lt;li&gt;逻辑运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;,&amp;amp;&amp;amp;,!);&lt;/li&gt;
      &lt;li&gt;条件运算符（?:);&lt;/li&gt;
      &lt;li&gt;位运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, &amp;amp; , « ,»,~,^);&lt;/li&gt;
      &lt;li&gt;字符串运算符（+).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;表达式：有4类表达式，分别为：
    &lt;ul&gt;
      &lt;li&gt;赋值表达式，&lt;/li&gt;
      &lt;li&gt;算术表达式，&lt;/li&gt;
      &lt;li&gt;布尔表达式，&lt;/li&gt;
      &lt;li&gt;字符串表达式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;变量：变量有以下类型：
    &lt;ul&gt;
      &lt;li&gt;object(对象）,&lt;/li&gt;
      &lt;li&gt;array(数组）,&lt;/li&gt;
      &lt;li&gt;number(数），&lt;/li&gt;
      &lt;li&gt;boolean(布尔值）,&lt;/li&gt;
      &lt;li&gt;null(空值)，&lt;/li&gt;
      &lt;li&gt;undefined(没有定义和赋值的变量），&lt;/li&gt;
      &lt;li&gt;string(字符串）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;变量定义用var关键字。&lt;/p&gt;

&lt;h3 id=&quot;javascript-2&quot;&gt;javascript使用方法&lt;/h3&gt;

&lt;p&gt;通过&lt;script&gt;&lt;/script&gt;可以装饰js脚本嵌入到网页中，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;script language=&quot;javascript&quot;&amp;gt;
 document.write(&quot;这是JavaScript&quot;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>mysql简述</title>
   <link href="/myslq/2016/01/23/mysql%E7%AE%80%E8%BF%B0"/>
   <updated>2016-01-23T00:00:00+08:00</updated>
   <id>/myslq/2016/01/23/mysql简述</id>
   <content type="html">&lt;h3 id=&quot;phpmysql&quot;&gt;PHP的MySQL扩展(优缺点)&lt;/h3&gt;

&lt;p&gt;　设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程接口；并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端进行交互，但并不支持后期MySQL服务端提供的一些特性。&lt;/p&gt;

&lt;h3 id=&quot;phpmysqli&quot;&gt;PHP的mysqli扩展&lt;/h3&gt;

&lt;p&gt;mysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用 MySQL4.1.3或更新版本中新的高级特性；&lt;/p&gt;

&lt;p&gt;mysqli扩展在PHP 5及以后版本中包含；&lt;/p&gt;

&lt;p&gt;mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：面向对象接口、 prepared语句支持、多语句执行支持、事务支持、增强的调试能力、嵌入式服务支持。&lt;/p&gt;

&lt;h3 id=&quot;phppdo&quot;&gt;PHP数据对象(PDO)&lt;/h3&gt;

&lt;p&gt;PHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以，使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;下面是我这个星期做过的几种数据库连接的方式：&lt;/h3&gt;

&lt;p&gt;Mysql连接：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;数据库连接错误&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bbs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;set names &#39;utf8&#39;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;数据库连接成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mysqli连接：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysqli_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;localhost&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bbs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;数据库连接错误&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli_connect_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;数据库连接成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pdo连接：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$pdo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pdo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql:host=localhost;dbname=bbs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PDDException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;数据库连接错误&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;数据库连接成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mysqlmysqlipdo&quot;&gt;以下是我在网站看到的Mysql、Mysqli、Pdo三种方式的区别对比&lt;/h3&gt;

&lt;p&gt;PHP-MySQL 是 PHP 操作 MySQL 资料库最原始的 Extension ，PHP-MySQLi 的 i 代表 Improvement ，提高了相对进阶的功能，就 Extension 而言，本身也增加了安全性。&lt;/p&gt;

&lt;p&gt;而 PDO (PHP Data Object) 则是提供了一个 Abstraction Layer 来操作资料库&lt;/p&gt;

&lt;p&gt;1.mysql与mysqli&lt;/p&gt;

&lt;p&gt;mysqli是php5提供的新函数库，(i)表示改进，其执行速度更快.当然也更安全&lt;/p&gt;

&lt;p&gt;mysql是非持继连接函数而mysqli是永远连接函数。也就是说mysql每次链接都会打开一个连接的进程而mysqli多次运行mysqli将使用同一连接进程,从而减少了服务器的开销 有些朋友在编程的时候，使用new mysqli(‘localhost’, usenamer’, ‘password’, ‘databasename’);总是报错，Fatal error: Class ‘mysqli’ not found in d:\…
mysqli类不是php自带的吗？不是默认开启的，win下要改php.ini,去掉php_mysqli.dll前的;,linux下要把mysqli编译进去。&lt;/p&gt;

&lt;p&gt;一:Mysqli.dll是一个允许以对象的方式或者过程操作数据库的，它的使用方式也很容易。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_select_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dn_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT `name` FROM `users` WHERE `location` = &#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_fetch_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MYSQL_ASSOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_free_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实背后有些学问… 这种方式不能 Bind Column ，以前例的 SQL 叙述来说，$location 的地方容易被 SQL Injection。后来于是发展出了 mysql_escape_string() (备注：5.3.0之后弃用) 以及 mysql_real_escape_string()来解决这个问题，不过这麽一搞，整个叙述会变得複杂且丑陋，而且如果栏位多了，可以想见会是怎样的情形…&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM users WHERE user=&#39;%s&#39; AND password=&#39;%s&#39;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 PHP-MySQLi 中有了不少进步，除了透过 Bind Column 来解决上述问题，而且也多援 Transaction, Multi Query ，并且同时提供了 Object oriented style (下面这段 PHP-MySQLi 范例的写法) 和 Procedural style&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$mysqli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO `users` (id, name, gender, location) VALUES (?, ?, ?, ?)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mysqli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dsss&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$source_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$source_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$source_gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$source_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$mysqli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但看到这边又发现了一些缺点，例如得 Bind Result，这个就有点多馀，不过这其实无关紧要，因为最大的问题还是在于这不是一个抽象(Abstraction)的方法，所以当后端更换资料库的时候，就是痛苦的开始… 于是 PDO 就出现了&lt;/p&gt;

&lt;p&gt;2.PDO与mysql&lt;/p&gt;

&lt;p&gt;PDO是PHP5.1之后才支持的，他为访问数据库采用了一致性的接口。但是国内众多的开源程序都是使用MySQL的extension所提供的function连接数据库，进行查询。PDO功能强大为何国内成熟的PHP系统都不使用呢？问过几个朋友为啥用PDO,答案是“快”，PDO连接数据库会快么？为什么使用PDO?他们两种方式有什么区别？首先还是比较关心的性能问题.写了1个脚本测试向MySQL插入100万条数据。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysql_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mysql connect error&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql:host=127.0.0.1;dbname=performace_test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PDO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ATTR_PERSISTENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TRUNCATE TABLE `performace_test`.`myquery`&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Truncate Table
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO `performace_test`.`myquery`(`goods_id`,`cat_id`,`click_count`,`goods_number`,`goods_weight`,`goods_sn`,`goods_name`,`goods_reason`,`brand_name`,`goods_thumb`,`brand_id`,`is_on_sale`,`wap_cod`,`wap_title`,`wap_detail`,`wap_flag`,`wap_onsale`,`shop_price`,`cost_price`,`channel_rate`,`channel_onsale`,`add_time`,`is_main`,`last_update`,`brand_logo`) VALUES ( ’80′,’298′,’65′,’100′,’0.125′,’SMT000080′,’健康′,”,’健康120’,&#39;images/201004 /thumb_img/80_thumb_G_1272071721054.jpg’,’1′,’0′,’0′,NULL,NULL,NULL,’0′,’2980.00′,’0.00′,’1.250000′,’1′,’1271612064′,’0′,’1297624384′,’1293649512083026412.jpg’)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;USE MySQL extension: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`performace_test`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`myquery`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Truncate Table
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/r/nUSE PDO : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;USE MySQL extension: 95.233189106s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;USE PDO : 99.1193888187s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在链接MySQL上几乎没有区别。PDO的性能损失完全可以忽略不计。但是却有非常多的操作却是MySQL扩展库所不具备的：&lt;/p&gt;

&lt;p&gt;1:PDO真正的以底层实现的统一接口数库操作接口&lt;/p&gt;

&lt;p&gt;2:PDO支持更高级的DB特性操作，如：存储过程的调度等,mysql原生库是不支持的.&lt;/p&gt;

&lt;p&gt;3:PDO是PHP官方的PECL库，兼容性稳定性必然要高于MySQL Extension,可以直接使用 pecl upgrade pdo 命令升级.&lt;/p&gt;

&lt;p&gt;PHP6默认也是使用PDO进行数据库链接，MySQL Extension会作为辅助。所以我们在日常项目中，如果环境允许，尽可能去使用PDO来进行MySQL数据库操作。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Cookie+Session</title>
   <link href="/2016/01/15/session-cookies"/>
   <updated>2016-01-15T00:00:00+08:00</updated>
   <id>/2016/01/15/session-cookies</id>
   <content type="html">&lt;h2&gt;cookie机制&lt;/h2&gt;
&lt;p&gt;Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。&lt;/p&gt;

&lt;p&gt;具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。
正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。&lt;/p&gt;

&lt;p&gt;cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。&lt;/p&gt;

&lt;p&gt;而session机制采用的是一种在服务器端保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式 。&lt;/p&gt;

&lt;p&gt;session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。&lt;/p&gt;

&lt;p&gt;就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的session机制更安全些，因为它不会任意读取客户存储的信息。&lt;/p&gt;

&lt;h2&gt;session机制&lt;/h2&gt;
&lt;p&gt;session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。&lt;/p&gt;

&lt;p&gt;当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。&lt;/p&gt;

&lt;p&gt;保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。
经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。&lt;/p&gt;

&lt;p&gt;Cookie与Session都能够进行会话跟踪，但是完成的原理不太一样。普通状况下二者均能够满足需求，但有时分不能够运用Cookie，有时分不能够运用Session。下面经过比拟阐明二者的特性以及适用的场所。&lt;/p&gt;

&lt;h4&gt;1 .存取方式的不同&lt;/h4&gt;

&lt;p&gt;Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。
而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。&lt;/p&gt;

&lt;h4&gt;2 .隐私策略的不同&lt;/h4&gt;

&lt;p&gt;Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。
假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。&lt;/p&gt;

&lt;h4&gt;3.有效期上的不同&lt;/h4&gt;

&lt;p&gt;使用过Google的人都晓得，假如登录过Google，则Google的登录信息长期有效。用户不用每次访问都重新登录，Google会持久地记载该用户的登录信息。要到达这种效果，运用Cookie会是比较好的选择。只需要设置Cookie的过期时间属性为一个很大很大的数字。&lt;/p&gt;

&lt;p&gt;由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了阅读器该Session就会失效，因而Session不能完成信息永世有效的效果。运用URL地址重写也不能完成。而且假如设置Session的超时时间过长，服务器累计的Session就会越多，越容易招致内存溢出。&lt;/p&gt;

&lt;h4&gt;4.服务器压力的不同&lt;/h4&gt;

&lt;p&gt;Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。&lt;/p&gt;

&lt;p&gt;而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。&lt;/p&gt;

&lt;h4&gt;5 .浏览器支持的不同&lt;/h4&gt;

&lt;p&gt;Cookie是需要客户端浏览器支持的。假如客户端禁用了Cookie，或者不支持Cookie，则会话跟踪会失效。关于WAP上的应用，常规的Cookie就派不上用场了。&lt;/p&gt;

&lt;p&gt;假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。需要注意的是一切的用到Session程序的URL都要进行URL地址重写，否则Session会话跟踪还会失效。关于WAP应用来说，Session+URL地址重写或许是它唯一的选择。&lt;/p&gt;

&lt;p&gt;假如客户端支持Cookie，则Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为–1），也能够设为一切阅读器窗口内有效（把过期时间设为某个大于0的整数）。但Session只能在本阅读器窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的Session。（IE8下不同窗口Session相干）&lt;/p&gt;

&lt;h4&gt;6.跨域支持上的不同&lt;/h4&gt;

&lt;p&gt;Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。
仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在 Cygwin 上编译 Contiki</title>
   <link href="/embedded/2015/10/26/contiki-cygwin"/>
   <updated>2015-10-26T00:00:00+08:00</updated>
   <id>/embedded/2015/10/26/contiki-cygwin</id>
   <content type="html">&lt;p&gt;由于使用 Contiki 需要 Linux 环境，切换来切换去很麻烦，幸好 Windows 下面有 Unix 模拟环境软件，Cygwin。本文主要介绍 8051 核的 Contiki 编译，它的编译需要编译器 SDCC，所以本文介绍 SDCC 的编译。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;官方 8051 核的编译文档请参考 &lt;a href=&quot;https://github.com/contiki-os/contiki/wiki/8051-Requirements&quot;&gt;8051 Requirements&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注：官方的 win32 版的 SDCC 并不适用。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;依赖&lt;/h2&gt;

&lt;p&gt;必须确定安装以下依赖包，可以从 Cygwin 源中直接找到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;gcc&lt;/li&gt;
    &lt;li&gt;flex&lt;/li&gt;
    &lt;li&gt;bison&lt;/li&gt;
    &lt;li&gt;libboost-graph-dev&lt;/li&gt;
    &lt;li&gt;python&lt;/li&gt;
    &lt;li&gt;make&lt;/li&gt;
    &lt;li&gt;texinfo&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;此外，还需要安装一个工具，&lt;a href=&quot;http://srecord.sourceforge.net/&quot;&gt;srecord&lt;/a&gt;，下载 Win32 版本后，直接放于&lt;code class=&quot;highlighter-rouge&quot;&gt;cygwin/bin/&lt;/code&gt;目录下即可。&lt;/p&gt;

&lt;h2 id=&quot;sdcc&quot;&gt;编译 SDCC&lt;/h2&gt;

&lt;h3 id=&quot;sdcc-&quot;&gt;SDCC 源码下载&lt;/h3&gt;

&lt;p&gt;直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;svn&lt;/code&gt;下载即可，本文版本为&lt;strong&gt;9377&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn co svn://svn.code.sf.net/p/sdcc/code/trunk/sdcc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sdcc--1&quot;&gt;SDCC 源码修改&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;device/lib/incl.mk&lt;/code&gt;，找到：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile
 MODELS = small medium large
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改成&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile
 MODELS = small large huge
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;编译&lt;code class=&quot;highlighter-rouge&quot;&gt;device/lib/Makefile.in&lt;/code&gt;，找到：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile
 TARGETS += models small-mcs51-stack-auto
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改成：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile
 TARGETS += models model-mcs51-stack-auto
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;编译&lt;/h3&gt;

&lt;p&gt;进行配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --disable-gbz80-port --disable-z80-port --disable-ds390-port --disable-ds400-port --disable-pic14-port --disable-pic16-port --disable-hc08-port --disable-r2k-port --disable-z180-port --disable-sdcdb --disable-ucsim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译并安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;试用&lt;/h2&gt;

&lt;p&gt;在 Contiki 的&lt;code class=&quot;highlighter-rouge&quot;&gt;example/hello-world&lt;/code&gt;目录下运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make &lt;span class=&quot;nv&quot;&gt;TARGET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cc2530dk all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;便可以生成&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-world.hex&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用 SmartRF Flash 工具便可以下载。&lt;/p&gt;

&lt;h2 id=&quot;cc-tool&quot;&gt;关于编译 cc-tool&lt;/h2&gt;

&lt;p&gt;还是别折腾了，因为 cygwin 下，libusb 不支持。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Editor 使用入门</title>
   <link href="/daily/2015/10/11/jekyll-editor-tutorial"/>
   <updated>2015-10-11T00:00:00+08:00</updated>
   <id>/daily/2015/10/11/jekyll-editor-tutorial</id>
   <content type="html">&lt;p&gt;Jekyll Editor 专门为 Jekyll 博客定制的强大的 markdown 编辑器，它会自动从&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;yourname&amp;gt;.github.io&lt;/code&gt;仓库读取&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;目录下的博客列表，并可以读取、创建、修改博客。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Github&lt;/strong&gt;：https://github.com/Simpleyyt/jekyll-editor.git&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chrome 商店&lt;/strong&gt;：https://chrome.google.com/webstore/detail/jekyll-editor/dfdkgbhjmllemfblfoohhehdigokocme&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;主要功能&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;获取博文列表，发布、更新、修改博文&lt;/li&gt;
  &lt;li&gt;博文自动保存到本地&lt;/li&gt;
  &lt;li&gt;强大的 Markdown 编辑器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;使用说明&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-10-11/10214115.jpg&quot; alt=&quot;Jekyll Editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左上角为编辑器的常用工具，包含&lt;code class=&quot;highlighter-rouge&quot;&gt;emoji&lt;/code&gt;表情。右上角的工具依次为登录、全窗口预览、新博文、博文列表、元数据、提交博文，帮助、关于。&lt;/p&gt;

&lt;p&gt;首次使用时，必须先进行登录，也就是与 github 相连。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;博文列表&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-10-11/12709365.jpg&quot; alt=&quot;博文列表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;博文列表会自动获取&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;yourname.github.io&lt;/code&gt;仓库读取&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;date&amp;gt;-&amp;lt;slug&amp;gt;.md&lt;/code&gt;格式的文件，即为博文。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;元数据&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-10-11/85340312.jpg&quot; alt=&quot;元数据&quot; /&gt;&lt;/p&gt;

&lt;p&gt;即博文的 yaml 格式数据，博文将会以文件名&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;date&amp;gt;-&amp;lt;slug&amp;gt;.md&lt;/code&gt;的格式更新。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注：当“发布”打勾时，才会真正地发布。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;bug&quot;&gt;已知 Bug&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在获取博文列表时，可能会由于多方面原因卡死&lt;/li&gt;
  &lt;li&gt;预览窗口的滚动条有时会出现问题&lt;/li&gt;
  &lt;li&gt;发布时可能会卡死&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Editor 应用上线</title>
   <link href="/daily/2015/10/11/jekyll-editor-online"/>
   <updated>2015-10-11T00:00:00+08:00</updated>
   <id>/daily/2015/10/11/jekyll-editor-online</id>
   <content type="html">&lt;p&gt;Jekyll Editor 的 Chrome App 版本终于发布，具体地址为：&lt;a href=&quot;https://chrome.google.com/webstore/detail/jekyll-editor/dfdkgbhjmllemfblfoohhehdigokocme?hl=zh-CN&quot;&gt;Jekyll Editor&lt;/a&gt;。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;为了发布这个应用我真是费了好多心思，因为本人并没有 VISA 卡，也没有信用卡。我想到了一个神奇的网站，不是58，而是淘宝，搜了好久之后，发现有一种叫 VISA 虚拟卡，但是好像不能用，可能会被禁:flushed:。&lt;/p&gt;

&lt;p&gt;当然，还有一种是在线帮忙开，费用非常贵，要200多块，我还是咬咬牙就拍了:sob:。说多了都是泪，哎。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chrome App 地址为：https://chrome.google.com/webstore/detail/jekyll-editor/dfdkgbhjmllemfblfoohhehdigokocme?hl=zh-CN&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>写 Jekyll 博客工具</title>
   <link href="/daily/2015/10/09/tool-for-jekyll-blog"/>
   <updated>2015-10-09T00:00:00+08:00</updated>
   <id>/daily/2015/10/09/tool-for-jekyll-blog</id>
   <content type="html">&lt;p&gt;上次说要写一个类似 stackeditor 的东西来写 Jekyll 博客，终于写好了。这将是第一篇用该工具写的博客。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;详细的说明将会在发布之后再说:smiley:，它是 Chrome App，基于 Editor.md 的一个应用，挺不错的，该有的都有，就是有时候有会 Bug，:disappointed_relieved:。但是没事，我以后会慢慢改进。&lt;/p&gt;

&lt;p&gt;我已经把代码 push 到 github 上去了，项目地址：&lt;a href=&quot;https://github.com/Simpleyyt/jekyll-editor.git&quot;&gt;https://github.com/Simpleyyt/jekyll-editor.git&lt;/a&gt;，写得有点乱，以后再慢慢重构。还有一个重要的问题，我没有 chrome 开发者账号:frowning:，好惨。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-10-9/34912413.jpg&quot; alt=&quot;Jekyll Editor 截图&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TCP 之保活计时器</title>
   <link href="/network/2015/09/23/tcp-keepalive-timer"/>
   <updated>2015-09-23T00:00:00+08:00</updated>
   <id>/network/2015/09/23/tcp-keepalive-timer</id>
   <content type="html">&lt;p&gt;保活计时器并不是 TCP 规范中的一部分，是一个有争论的功能。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;如果一个给定的连接在两个小时之内没有任何动作，则服务器就向客户发送一个探查报文段，客户机有如下状态：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;客户机仍正常运行，回复响应。服务器在两小时以后将保活定时器复位。&lt;/li&gt;
    &lt;li&gt;客户机已崩溃，TCP 都没有响应，75秒后超时。服务器总共发10个这样的探查，每个间隔75秒。&lt;/li&gt;
    &lt;li&gt;客户机已重新启动，客户机回复 RST。&lt;/li&gt;
    &lt;li&gt;客户机正常运行，但是服务不可到达，与状态2相同。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>字节对齐</title>
   <link href="/program/2015/09/23/data-structure-alignmen"/>
   <updated>2015-09-23T00:00:00+08:00</updated>
   <id>/program/2015/09/23/data-structure-alignmen</id>
   <content type="html">&lt;p&gt;Linux 沿用的对齐策略是，2字节数据类型（例如&lt;code class=&quot;highlighter-rouge&quot;&gt;short&lt;/code&gt;）的地址是2的倍数，而较大的数据类型（例如&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;int*&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;）的地址必须是4的倍数。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Windows 要求任何 K 字节基本对象的址址必须是 K 的倍数，K = 2, 4 或者 8。特别的，它要求一个&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;long long&lt;/code&gt;类型数据的地址应该是8的倍数。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;对齐准则&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;四个重要的基本概念：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;数据类型自身的对齐值：char型数据自身对齐值为1字节，short型数据为2字节，int/float型为4字节，double型为8字节。&lt;/li&gt;
    &lt;li&gt;结构体或类的自身对齐值：其成员中自身对齐值最大的那个值。&lt;/li&gt;
    &lt;li&gt;指定对齐值：#pragma pack (value)时的指定对齐值value。&lt;/li&gt;
    &lt;li&gt;数据成员、结构体和类的有效对齐值：自身对齐值和指定对齐值中较小者，即有效对齐值=min{自身对齐值，当前指定的pack值}。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中，有效对齐值&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;是最终用来决定数据存放地址方式的值。有效对齐&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;表示&lt;strong&gt;“对齐在&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;上”&lt;/strong&gt;，即该数据的&lt;strong&gt;“存放起始地址 % N = 0”&lt;/strong&gt;。而数据结构中的数据变量都是按定义的先后顺序存放。第一个数据变量的起始地址就是数据结构的起始地址。结构体的成员变量要对齐存放，结构体本身也要根据自身的有效对齐值圆整(即结构体成员变量占用总长度为结构体有效对齐值的整数倍)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例1：&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cpp
struct A{
    int    a;
    char   b;
    short  c;
};
struct B{
    char   b;
    int    a;
    short  c;
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结果：&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(strcut A)&lt;/code&gt;值为8；&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(struct B)&lt;/code&gt;的值却是12。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例2：&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cpp
#pragma pack(2)  //指定按2字节对齐
struct C{
    char  b;
    int   a;
    short c;
};
#pragma pack()   //取消指定对齐，恢复缺省对齐
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结果：&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(struct C) = 8&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;栈内存对齐&lt;/h2&gt;

&lt;p&gt;在VC/C++中，栈的对齐方式不受结构体成员对齐选项的影响。总是保持对齐且对齐在4字节边界上。（并未考证64位）&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;位域对齐&lt;/h2&gt;

&lt;p&gt;位域成员不能单独被取&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;值。下面主要讨论含有位域的结构体的&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;C99 规定&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;可以作为位域类型，但编译器几乎都对此作了扩展，允许其它类型的存在。位域作为嵌入式系统中非常常见的一种编程工具，优点在于压缩程序的存储空间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其对齐规则大致为：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;如果相邻位域字段的类型相同，且其位宽之和小于类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止；&lt;/li&gt;
    &lt;li&gt;如果相邻位域字段的类型相同，但其位宽之和大于类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；&lt;/li&gt;
    &lt;li&gt;如果相邻的位域字段的类型不同，则各编译器的具体实现有差异，VC6 采取不压缩方式，Dev-C++ 和 GCC 采取压缩方式；&lt;/li&gt;
    &lt;li&gt;如果位域字段之间穿插着非位域字段，则不进行压缩；&lt;/li&gt;
    &lt;li&gt;整个结构体的总大小为最宽基本类型成员大小的整数倍，而位域则按照其最宽类型字节数对齐。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;例3：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element3&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;位域类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;，第1个字节仅能容纳下&lt;code class=&quot;highlighter-rouge&quot;&gt;element1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;element2&lt;/code&gt;，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;element1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;element2&lt;/code&gt;被压缩到第1个字节中，而&lt;code class=&quot;highlighter-rouge&quot;&gt;element3&lt;/code&gt;只能从下一个字节开始。因此&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(BitField)&lt;/code&gt;的结果为2。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例4：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructBitField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element2&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element3&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element4&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element5&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stelement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//在含位域的结构或联合中也可同时说明普通成员
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;位域中最宽类型&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;的字节数为4，因此结构体按4字节对齐，在 VC6 中其&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;为16。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例5：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitField4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element3&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;长度为0的位域告诉编译器将下一个位域放在一个存储单元的起始位置。如上，编译器会给成员&lt;code class=&quot;highlighter-rouge&quot;&gt;element1&lt;/code&gt;分配3位，接着跳过余下的4位到下一个存储单元，然后给成员&lt;code class=&quot;highlighter-rouge&quot;&gt;element3&lt;/code&gt;分配5位。故上面的结构体大小为2。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;本文参考：&lt;a href=&quot;http://www.cnblogs.com/clover-toeic/p/3853132.html&quot;&gt;http://www.cnblogs.com/clover-toeic/p/3853132.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>位域的大小端问题</title>
   <link href="/program/2015/09/23/bit-endian-little-endian-bit-field"/>
   <updated>2015-09-23T00:00:00+08:00</updated>
   <id>/program/2015/09/23/bit-endian-little-endian-bit-field</id>
   <content type="html">&lt;p&gt;有如下位域结构体：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;小端：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在寄存器中分布如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C11 C10 C9 C8 C7 C6 C5 C4 C3 C2 C1 C0 B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0 A3 A2 A1 A0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在内存中存放格式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xXXXX0020: B3 B2 B1 B0 A3 A2 A1 A0
0xXXXX0021: B11 B10 B9 B8 B7 B6 B5 B4
0xXXXX0022: C3 C2 C1 C0 B15 B14 B13 B12
0xXXXX0023: C11 C10 C9 C8 C7 C6 C5 C4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;大端：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在寄存器中分布如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A3 A2 A1 A0 B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0 C11 C10 C9 C8 C7 C6 C5 C4 C3 C2 C1 C0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在内存中存放如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xXXXX0020: A3 A2 A1 A0 B15 B14 B13
0xXXXX0021: B11 B10 B9 B8 B7 B6 B5 B4
0xXXXX0022: B3 B2 B1 B0 C11 C10 C9 C8
0xXXXX0023: C7 C6 C5 C4 C3 C2 C1 C0
C11 C10 C9 C8 C7 C6 C5 C4  B15 B14 B13 B12 C3 C2 C1 C0  B11 B10 B9 B8 B7 B6 B5 B4  A3 A2 A1 A0 B3 B2 B1 B0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;本文转自：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_6f611c300102uznw.html&quot;&gt;http://blog.sina.com.cn/s/blog_6f611c300102uznw.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TCP 和 UDP 的区别</title>
   <link href="/network/2015/09/22/difference-between-tcp-vs-udp-protocol"/>
   <updated>2015-09-22T00:00:00+08:00</updated>
   <id>/network/2015/09/22/difference-between-tcp-vs-udp-protocol</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;TCP(Transmission Control Protocol)：传输控制协议&lt;/li&gt;
  &lt;li&gt;UDP(User Datagram Protocol)：用户数据报协议&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要从连接性(Connectivity)、可靠性(Reliability)、有序性(Ordering)、有界性(Boundary)、拥塞控制(Congestion or Flow control)、传输速度(Speed)、量级(Heavy/Light weight)、头部大小(Header size)等8个方面来讲。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;1. TCP是面向连接(Connection oriented)的协议，UDP是无连接(Connection less)协议；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCP用三次握手建立连接：1) Client向server发送SYN；2) Server接收到SYN，回复Client一个SYN-ACK；3) Client接收到SYN_ACK，回复Server一个ACK。到此，连接建成。UDP发送数据前不需要建立连接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2. TCP可靠，UDP不可靠；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCP丢包会自动重传，UDP不会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. TCP有序，UDP无序；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;消息在传输过程中可能会乱序，后发送的消息可能会先到达，TCP会对其进行重排序，UDP不会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. TCP无界，UDP有界；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCP通过字节流传输，UDP中每一个包都是单独的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5. TCP有流量控制（拥塞控制），UDP没有；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;主要靠三次握手实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;6. TCP传输慢，UDP传输快；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为TCP需要建立连接、保证可靠性和有序性，所以比较耗时。这就是为什么视频流、广播电视、在线多媒体游戏等选择使用UDP。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;7. TCP是重量级的，UDP是轻量级的；&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCP要建立连接、保证可靠性和有序性，就会传输更多的信息，如TCP的包头比较大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;8. TCP的头部比UDP大；TCP Packet Format Diagram UDP Packet format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;TCP是面向连接的、可靠的、有序的、速度慢的协议；UDP是无连接的、不可靠的、无序的、速度快的协议。&lt;/li&gt;
    &lt;li&gt;TCP开销比UDP大，TCP头部需要20字节，UDP头部只要8个字节。&lt;/li&gt;
    &lt;li&gt;TCP无界有拥塞控制，TCP有界无拥塞控制。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;基于TCP的协议有：HTTP/HTTPS，Telnet，FTP，SMTP。&lt;/li&gt;
    &lt;li&gt;基于UDP的协议有：DHCP，DNS，SNMP，TFTP，BOOTP。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;本文转自：&lt;a href=&quot;http://liangjiabin.com/blog/2015/03/difference-between-tcp-vs-udp-protocol.html&quot;&gt;http://liangjiabin.com/blog/2015/03/difference-between-tcp-vs-udp-protocol.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP排序方式总结</title>
   <link href="/program/2015/09/22/PHP%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F"/>
   <updated>2015-09-22T00:00:00+08:00</updated>
   <id>/program/2015/09/22/PHP常见的排序方式</id>
   <content type="html">&lt;p&gt;最常用的四种排序方式:冒泡排序、选择排序、插入排序、快速排序的封装过程&lt;/p&gt;
&lt;h3&gt;一、冒泡排序&lt;/h3&gt;
&lt;p&gt;//定义一个数组
      $array=array(1,43,54,62,21,66,32,78,36,76,39);
      //打印出数组用于和排序后对比
      print_r($array);
      echo “&lt;br /&gt;”;
      //封装好一个方法,便于调取
      function bubbleSort($arr)
      {
      //获取数组单位数量,用于之后循环对比
      $len=count($arr);
      //该层循环控制 需要冒泡的轮数
      for($i=1;$i&amp;lt;$len;$i++) {
      //该层循环用来控制每轮 冒出一个数 需要比较的次数
      for($k=0;$k&amp;lt;$len-$i;$k++)
      {
      //第一个数和下一个数对比
       if($arr[$k]&amp;gt;$arr[$k+1])
          {
              //如果第二个数大于第一个数,就替换两个数的位置,
             $tmp=$arr[$k+1];
              $arr[$k+1]=$arr[$k];
              $arr[$k]=$tmp;
          }
      }
      }
      return  $arr;
      }
      print_r(bubbleSort($array));&lt;/p&gt;
&lt;h3&gt;二、选择排序&lt;/h3&gt;
&lt;p&gt;$array=array(32,43,54,62,21,66,32,78,36,76,39);
print_r($array);
echo “&lt;br /&gt;”;
function selectSort($arr){
//双重循环完成，外层控制轮数，内层控制比较次数
     $len=count($arr);
      for($i=0;$i&amp;lt;$len-1;$i++){
       //先假设最小的值的位置
       $p = $i;
          for($j=$i+1;$j&amp;lt;$len;$j++){
            //$arr[$p] 是当前已知的最小值
            if($arr[$p] &amp;gt; $arr[$j]) {
                 //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。
                 $p =$j;
            }
           }
//已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。
    if($p!=$i){
            $tmp =$arr[$p];
            $arr[$p]=$arr[$i];
            $arr[$i]=$tmp;
         }
}
//返回最终结果
return $arr;
}
print_r(selectSort($array));&lt;/p&gt;
&lt;h3&gt;三、插入排序&lt;/h3&gt;

&lt;p&gt;$array=array(32,43,54,62,21,66,32,78,36,76,39);
print_r($array);
echo “&lt;br /&gt;”;
function insertSort($arr) {
    $len=count($arr);
      for($i=1; $i&amp;lt;$len; $i++){         $tmp =$arr[$i];
         //内层循环控制，比较并插入
         for($j=$i-1;$j&amp;gt;=0;$j–) {
         if($tmp &amp;lt; $arr[$j]) {
                //发现插入的元素要小，交换位置，将后边的元素与前面的元素互换
                $arr[$j+1] = $arr[$j];
             $arr[$j] = $tmp;
         } else {
                //如果碰到不需要移动的元素，由于是已经排序好是数组，则前面的就不需要再次比较了。
                break;
         }
         }
      }
 return $arr;
}
print_r(insertSort($array));&lt;/p&gt;
&lt;h3&gt;四、快速排序&lt;/h3&gt;

&lt;p&gt;$array=array(32,43,54,62,21,66,32,78,36,76,39);
print_r($array);
echo “&lt;br /&gt;”;
function insertSort($arr) {
    $len=count($arr);
      for($i=1; $i&amp;lt;$len; $i++){         $tmp =$arr[$i];
         //内层循环控制，比较并插入
         for($j=$i-1;$j&amp;gt;=0;$j–) {
         if($tmp &amp;lt; $arr[$j]) {
                //发现插入的元素要小，交换位置，将后边的元素与前面的元素互换
                $arr[$j+1] = $arr[$j];
             $arr[$j] = $tmp;
         } else {
                //如果碰到不需要移动的元素，由于是已经排序好是数组，则前面的就不需要再次比较了。
                break;
         }
         }
      }
 return $arr;
}
print_r(insertSort($array));&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>写 Jekyll 博客的正确姿势</title>
   <link href="/jekyll/2015/09/21/tools-for-jekyll"/>
   <updated>2015-09-21T00:00:00+08:00</updated>
   <id>/jekyll/2015/09/21/tools-for-jekyll</id>
   <content type="html">&lt;p&gt;用 Jekyll 写博客有个麻烦的地方，就是你可能需要把博客&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;下来，修改完成&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;后，再&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;上 GitHub；或者使用 GitHub 的在线编辑器编辑，无论哪种都非常麻烦。幸好找到了几个第三方的写博客和图床工具。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;写博客工具&lt;/h2&gt;

&lt;p&gt;有两个工具，分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyller&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;prose.io&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;jekyller&quot;&gt;Jekyller&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyller&lt;/code&gt;是 Chrome 上的应用，它可以管理你的所有博客，实时&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;渲染。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-9-21/21644919.jpg&quot; alt=&quot;Jekyller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是它的 UI 比较难看，而且对&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;的支持也不是很好。&lt;/p&gt;

&lt;h3 id=&quot;proseio&quot;&gt;Prose.io&lt;/h3&gt;

&lt;p&gt;非常好的一个工具，它的编辑器非常强大，可以上传图片、文件等，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件中配置&lt;code class=&quot;highlighter-rouge&quot;&gt;prose.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-9-21/82332870.jpg&quot; alt=&quot;Prose.io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;缺点就是不支持实时预览，而且也不会自己保存。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;图床&lt;/h2&gt;

&lt;p&gt;图床的话强烈推荐&lt;strong&gt;七牛&lt;/strong&gt;，其缺点就是操作不人性化，但是 chrome 上面有好多相关的插件解决这个问题，比如&lt;a href=&quot;http://yotuku.cn/&quot;&gt;极简图床&lt;/a&gt; 便是基于七牛的图床网站。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;图表工具&lt;/h2&gt;

&lt;p&gt;写博客难免会需要用画一些图表，有两类图表，一类是 &lt;a href=&quot;http://yuml.me/diagram/scruffy/class/draw&quot;&gt;yUML&lt;/a&gt;、&lt;a href=&quot;http://plantuml.com/&quot;&gt;plantUML&lt;/a&gt;, 另一类是 &lt;a href=&quot;http://draw.io&quot;&gt;draw.io&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;yuml--plantuml&quot;&gt;yUML 和 plantUML&lt;/h3&gt;

&lt;p&gt;这类图表只需要按格式输入代码，便会自动产生图表，生成图片链接，省去了上传到图床，后期也可以修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-9-21/46889912.jpg&quot; alt=&quot;yUML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-9-21/34152859.jpg&quot; alt=&quot;plantUML&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;drawio&quot;&gt;draw.io&lt;/h3&gt;

&lt;p&gt;这个是在线手动绘图的工具，chrome 应用商店里面也下载得到离线应用，绘图完成之后需要上传到图床中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://simpleyyt.qiniudn.com/15-9-21/68984484.jpg&quot; alt=&quot;draw.io&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
